<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) Microsoft Corporation. All rights reserved.
THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.

-->

<?xml-stylesheet href="../../../../Common/Overview.xsl" type="text/xsl"?>
<VSSDKSample>
  <ImagePath>../../../../Common</ImagePath>
  <Status>
    <Accessibility>true</Accessibility>
    <Comments>true</Comments>
    <Documentation>false</Documentation>
    <ErrorHandling>true</ErrorHandling>
    <FollowSDKCodingStandards>true</FollowSDKCodingStandards>
    <Localizable>true</Localizable>
    <Overview>true</Overview>
    <ScenarioTests>true</ScenarioTests>
    <Supported>true</Supported>
    <Style>Reference</Style>
  </Status>
  <Overview>
    <ShortName>VisualBasic Reference.ComboBox</ShortName>
    <LongName>VisualBasic Combo Box Reference Sample</LongName>
    <Phrase>Adding combo boxes to toolbars in Visual Studio using VisualBasic.</Phrase>
  </Overview>
  <Introduction>
    <Summary>
      This sample demonstrates how to create combo boxes on Visual Studio’s toolbars. 
      This sample demonstrates the four types of combo boxes that can be created. 
    </Summary>
    <Goal>Adding a Drop Down Combo to Visual Studio and handling it</Goal>
    <Goal>Adding an Index Combo to Visual Studio and handling it</Goal>
    <Goal>Adding a MRU Combo to Visual Studio and handling it</Goal>
    <Goal>Adding a Dynamic Combo to Visual Studio and handling it</Goal>
    <Goal>Controling the programmatic name of the combo box commands by placing the commands within a menu 
    ("Tools" in our case) of the main menu bar.
    </Goal>
    <Image width="400" height="400">ComboBox.jpg</Image>
  </Introduction>
  <SampleInfo>
    <State>
    </State>
    <Type>Reference</Type>
    <Complexity>2</Complexity>
    <Screenshot>ComboBox.jpg</Screenshot>
    <Area>IDE</Area>
    <Language>VB</Language>
    <Folder>VisualStudioIntegration\Samples\IDE\VB\Reference.ComboBox\</Folder>
    <SampleSolution>Reference.ComboBox.sln</SampleSolution>
    <Doc>
    </Doc>
    <Keywords>
      <Keyword>ComboBox</Keyword>
      <Keyword>toolbar</Keyword>
    </Keywords>
  </SampleInfo>
  <GettingStarted>
    <Paragraph>
      The main focus of this sample is the VSCT file containing the definition of these combo boxes and
      the command handling logic for managing these combo boxes. The VB
      code is minimal. The event handler functions that are called when the user selects or enters items
      into a combo box simply display a message box.
    </Paragraph>
    <Paragraph>
      The interesting aspect of managing a combo box
      is that in general you need to handle 2 commands. There is the main command for the combo box
      that can return the current value for the combo as well as accept the new input from the user.
      In addition there is a second command that is used to retrieve the list of items to be displayed
      in the list associated with the combo box. This second command is referred to as a "GetList" command.
      IOleCommandTarget::Exec is called on this second command with a non-null "out" parameter, through
      which the list of items is returned as an array of strings. Even though Exec is called on this
      command, it is best to think of this Exec call as an extended IOleCommandTarget::QueryStatus call.
      This is necessary because IOleCommandTarget::QueryStatus method is only able to return a single "out"
      parameter, but in the case of the combo box we need two pieces of information: the current value and
      the list of all choices to fill the list.
    </Paragraph>
    <Paragraph>
      There are four styles of Combo Boxes:
    </Paragraph>
    <Paragraph>
      1. DropDownCombo
    </Paragraph>
    <Paragraph>
      A DropDownCombo does not let the user type into the combo box; they can only pick from the list.
      The string value of the element selected is returned.
      For example, this type of combo could be used for the "Solution Configurations" on the "Standard" toolbar.
    </Paragraph>
    <Paragraph>
      2. IndexCombo --
    </Paragraph>
    <Paragraph>
      An IndexCombo is the same as a DropDownCombo in that it is a "pick from list" only combo.
      The difference is an IndexCombo returns the selected value as an index into the list (0 based).
      For example, this type of combo could be used for the "Solution Configurations" on the "Standard" toolbar.
    </Paragraph>
    <Paragraph>
      3. MRUCombo
    </Paragraph>
    <Paragraph>
      An MRUCombo allows the user to type into the edit box. The history of strings entered
      is automatically persisted by the IDE on a per-user/per-machine basis.
      For example, this type of combo is used for the "Find" combo on the "Standard" toolbar.
    </Paragraph>
    <Paragraph>
      4. DynamicCombo
    </Paragraph>
    <Paragraph>
        A DynamicCombo allows the user to type into the edit box or pick from the list. The
        list of choices is usually fixed and is managed by the command handler for the command.
        For example, this type of combo is used for the "Zoom" combo on the "Class Designer" toolbar.
      </Paragraph>
    <Paragraph>
      Inside the VSCT file of this sample, the command definition section defines a new toolbar, a new
      toolbar group, and an example of each type of combo.
    </Paragraph>
    <Paragraph>
      NOTE: We deliberatly define our toolbar group with a main menu location as its parent
      (in this case Tools menu -- "guidSHLMainMenu:IDM_VS_MENU_TOOLS"). Doing this makes sure that our
      commands have a Programatic name that begins with "Tools."; also our commands
      will be organized into this "Tools" group in the command well. Our combo box commands are defined
      with the CommandWellOnly flag which will make our combo box commands hidden on the main menu by default.
      If the user customizes our commands onto the main menu, then they will be visible.
    </Paragraph>
    <Paragraph>
      Within a VSCT file, combo boxes are defined in a COMBOS_BEGIN ... COMBOS_END section.
      The following strings can be supplied with a command:
    </Paragraph>
    <Paragraph>
      1. Button Text (required) -- displayed as label of the command on a toolbar if IconAndText flag is specified.
      If any of the following optional strings are missing then Button Text is used instead.
    </Paragraph>
    <Paragraph>
        2. Menu Text (optional) -- displayed as label of the command on a menu if IconAndText flag is specified.
      </Paragraph>
    <Paragraph>
        3. Tooltip Text (optional) -- displayed when mouse hovers on command
      </Paragraph>
    <Paragraph>
        4. Command Well Name (optional) -- displayed as name of command in command well.
      </Paragraph>
    <Paragraph>
        5. Canonical Name (optional) -- English programmatic name of command used in Command Window and DTE.ExecuteCommand.
        In localized command/menu (CTO) resources, always provide the English canonical name so macros can be language independent.
      </Paragraph>
    <Paragraph>
        6. Localized Canonical Name (optional) -- Localized programmatic name of command used in Command Window, DTE.ExecuteCommand,
        and Tools.Options "Environment/Keyboard" page.
      </Paragraph>
    <Paragraph>
      The second section in the VSCT file, the command placement section, is used to
      actually place toolbar group with our combo boxes on our Toolbar.
    </Paragraph>
    <Paragraph>
      To run this sample you need to turn on the "Combo Box Sample" Toolbar. This can be done via the "Tools.Customize..." dialog.
      In addition you can use the Command Window (use View.OtherWindows.CommandWindow Ctrl-Alt-A command to display this window)
      to programmatically execute these Combo box commands. For Example, type the following in the Command Window:
    </Paragraph>
    <Paragraph>
      &gt;Tools.DropDownCombo Apples
    </Paragraph>
    <Paragraph>
      &gt;Tools.IndexCombo Tigers
    </Paragraph>
    <Paragraph>
      &gt;Tools.IndexCombo 2
    </Paragraph>
    <Paragraph>
      &gt;Tools.MRUCombo Hello
    </Paragraph>
    <Paragraph>
      &gt;Tools.DynamicCombo 34
    </Paragraph>
    <Paragraph>
      &gt;Tools.DynamicCombo ZoomToFit
    </Paragraph>
  </GettingStarted>
  <AdditionalResources>
    <Resource>
      <Title>Visual Studio SDK Website</Title>
      <URL>http://msdn.microsoft.com/vstudio/extend</URL>
    </Resource>
  </AdditionalResources>
  <FunctionalTests>
    <Test>
      Test calling the Tools.DropDownCombo command.
    </Test>
    <Test>
      Test calling the Tools.IndexCombo command.
    </Test>
    <Test>
      Test calling the Tools.MRUCombo command.
    </Test>
    <Test>
      Test calling the Tools.DynamicCombo command.
    </Test>
  </FunctionalTests>
  <ProjectFiles>
    <File>
      <Name>VsPkg.vb</Name>
      <Description>
        This file defines the VSPackage for this sample. Visual Studio uses this class to instantiate the package the first time a command is executed.
      </Description>
    </File>
    <File>
      <Name>PkgCmd.vsct</Name>
      <Description>
        This file defines the actual layout and type of the commands.
        It is divided in different sections (for example, command definition, command
        placement, ...), with each defining a specific set of properties.
      </Description>
    </File>
  </ProjectFiles>
</VSSDKSample>
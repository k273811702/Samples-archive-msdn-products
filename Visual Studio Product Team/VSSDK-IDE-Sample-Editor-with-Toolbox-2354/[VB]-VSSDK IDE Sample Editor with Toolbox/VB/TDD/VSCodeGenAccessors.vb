'**************************************************************************

'Copyright (c) Microsoft Corporation. All rights reserved.
'This code is licensed under the Visual Studio SDK license terms.
'THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
'ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
'IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
'PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.

'**************************************************************************

' ------------------------------------------------------------------------------
'<autogenerated>
'        This code was generated by Microsoft Visual Studio Team System 2005.
'
'        Changes to this file may cause incorrect behavior and will be lost if
'        the code is regenerated.
'</autogenerated>
'------------------------------------------------------------------------------

Imports Microsoft.VisualBasic
Imports System
Imports Microsoft.VisualStudio.TestTools.UnitTesting

Namespace Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.UnitTests
<System.Diagnostics.DebuggerStepThrough(), System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class BaseAccessor

	Protected m_privateObject As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject

	Protected Sub New(ByVal target As Object, ByVal type As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType)
		m_privateObject = New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type)
	End Sub

	Protected Sub New(ByVal type As Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType)
		Me.New(Nothing, type)
	End Sub

	Friend Overridable ReadOnly Property Target() As Object
		Get
			Return m_privateObject.Target
		End Get
	End Property

	Public Overrides Function ToString() As String
		Return Me.Target.ToString()
	End Function

	Public Overrides Overloads Function Equals(ByVal obj As Object) As Boolean
		If GetType(BaseAccessor).IsInstanceOfType(obj) Then
			obj = (CType(obj, BaseAccessor)).Target
		End If
		Return Me.Target.Equals(obj)
	End Function

	Public Overrides Function GetHashCode() As Integer
		Return Me.Target.GetHashCode()
	End Function
End Class

<System.Diagnostics.DebuggerStepThrough(), System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_EditorControlAccessor
	Inherits BaseAccessor

        Protected Shared m_privateType As New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(GetType(Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorControl))

	Friend Sub New(ByVal target As Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorControl)
		MyBase.New(target, m_privateType)
	End Sub

	Friend Sub InitializeComponent()
            Dim args() As Object = {}
		m_privateObject.Invoke("InitializeComponent", New System.Type(){}, args)
	End Sub
End Class
<System.Diagnostics.DebuggerStepThrough(), System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_EditorPackageAccessor
	Inherits BaseAccessor

        Protected Shared m_privateType As New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(GetType(Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorPackage))

	Friend Sub New(ByVal target As Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorPackage)
		MyBase.New(target, m_privateType)
	End Sub

	Friend Property editorFactory() As Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorFactory
		Get
			Dim ret As Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorFactory = (CType(m_privateObject.GetField("editorFactory"), Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorFactory))
			Return ret
		End Get
		Set(ByVal value As Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorFactory)
			m_privateObject.SetField("editorFactory", value)
		End Set
	End Property



	Friend Sub Initialize()
            Dim args() As Object = {}
		m_privateObject.Invoke("Initialize", New System.Type(){}, args)
	End Sub

	Friend Sub Dispose(ByVal disposing As Boolean)
            Dim args() As Object = {disposing}
		m_privateObject.Invoke("Dispose", New System.Type() { GetType(Boolean)}, args)
	End Sub
End Class
<System.Diagnostics.DebuggerStepThrough(), System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_ToolboxItemDataAccessor
	Inherits BaseAccessor

        Protected Shared m_privateType As New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(GetType(Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.ToolboxItemData))

	Friend Sub New(ByVal target As Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.ToolboxItemData)
		MyBase.New(target, m_privateType)
	End Sub

	Friend Property content() As String
		Get
                Dim ret As String = (CStr(m_privateObject.GetField("strContent")))
			Return ret
		End Get
		Set(ByVal value As String)
                m_privateObject.SetField("strContent", value)
		End Set
	End Property
End Class
<System.Diagnostics.DebuggerStepThrough(), System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_GuidListAccessor
	Inherits BaseAccessor

        Protected Shared m_privateType As New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("EditorWithToolbox", "Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.GuidList")

	Friend Sub New(ByVal target As Object)
		MyBase.New(target, m_privateType)
	End Sub

	Friend Shared Property guidEditorCmdSet() As Global.System.Guid
		Get
			Dim ret As Global.System.Guid = (CType(m_privateType.GetStaticField("guidEditorCmdSet"), Global.System.Guid))
			Return ret
		End Get
		Set(ByVal value As Global.System.Guid)
			m_privateType.SetStaticField("guidEditorCmdSet", value)
		End Set
	End Property

	Friend Shared Property guidEditorFactory() As Global.System.Guid
		Get
			Dim ret As Global.System.Guid = (CType(m_privateType.GetStaticField("guidEditorFactory"), Global.System.Guid))
			Return ret
		End Get
		Set(ByVal value As Global.System.Guid)
			m_privateType.SetStaticField("guidEditorFactory", value)
		End Set
	End Property

	Friend Shared Function CreatePrivate() As Object
            Dim args() As Object = {}
            Dim priv_obj As New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("EditorWithToolbox", "Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.GuidList", New System.Type() {}, args)
		Return priv_obj.Target
	End Function
End Class

<System.Diagnostics.DebuggerStepThrough(), System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_EditorPaneAccessor
	Inherits BaseAccessor

        Protected Shared m_privateType As New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(GetType(Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorPane))

	Friend Sub New(ByVal target As Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorPane)
		MyBase.New(target, m_privateType)
	End Sub

	Friend Shared Property fileFormat() As UInteger
		Get
			Dim ret As UInteger = (CUInt(m_privateType.GetStaticField("fileFormat")))
			Return ret
		End Get
		Set(ByVal value As UInteger)
			m_privateType.SetStaticField("fileFormat", value)
		End Set
	End Property

	Friend Shared Property fileExtension() As String
		Get
			Dim ret As String = (CStr(m_privateType.GetStaticField("fileExtension")))
			Return ret
		End Get
		Set(ByVal value As String)
			m_privateType.SetStaticField("fileExtension", value)
		End Set
	End Property

	Friend Shared Property endLine() As Char
		Get
			Dim ret As Char = (CChar(m_privateType.GetStaticField("endLine")))
			Return ret
		End Get
		Set(ByVal value As Char)
			m_privateType.SetStaticField("endLine", value)
		End Set
	End Property

	Friend Property toolboxData() As Global.Microsoft.VisualStudio.Shell.OleDataObject
		Get
			Dim ret As Global.Microsoft.VisualStudio.Shell.OleDataObject = (CType(m_privateObject.GetField("toolboxData"), Global.Microsoft.VisualStudio.Shell.OleDataObject))
			Return ret
		End Get
		Set(ByVal value As Global.Microsoft.VisualStudio.Shell.OleDataObject)
			m_privateObject.SetField("toolboxData", value)
		End Set
	End Property

	Friend Property fileName() As String
		Get
			Dim ret As String = (CStr(m_privateObject.GetField("fileName")))
			Return ret
		End Get
		Set(ByVal value As String)
			m_privateObject.SetField("fileName", value)
		End Set
	End Property

	Friend Property isDirty() As Boolean
		Get
                Dim ret As Boolean = (CBool(m_privateObject.GetField("bIsDirty")))
			Return ret
		End Get
		Set(ByVal value As Boolean)
                m_privateObject.SetField("bIsDirty", value)
		End Set
	End Property

	Friend Property loading() As Boolean
		Get
			Dim ret As Boolean = (CBool(m_privateObject.GetField("loading")))
			Return ret
		End Get
		Set(ByVal value As Boolean)
			m_privateObject.SetField("loading", value)
		End Set
	End Property

	Friend Property gettingCheckoutStatus() As Boolean
		Get
			Dim ret As Boolean = (CBool(m_privateObject.GetField("gettingCheckoutStatus")))
			Return ret
		End Get
		Set(ByVal value As Boolean)
			m_privateObject.SetField("gettingCheckoutStatus", value)
		End Set
	End Property

	Friend Property noScribbleMode() As Boolean
		Get
			Dim ret As Boolean = (CBool(m_privateObject.GetField("noScribbleMode")))
			Return ret
		End Get
		Set(ByVal value As Boolean)
			m_privateObject.SetField("noScribbleMode", value)
		End Set
	End Property

	Friend Property editorControl() As Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorControl
		Get
			Dim ret As Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorControl = (CType(m_privateObject.GetField("editorControl"), Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorControl))
			Return ret
		End Get
		Set(ByVal value As Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorControl)
			m_privateObject.SetField("editorControl", value)
		End Set
	End Property

	Friend Property components() As Global.System.ComponentModel.Container
		Get
			Dim ret As Global.System.ComponentModel.Container = (CType(m_privateObject.GetField("components"), Global.System.ComponentModel.Container))
			Return ret
		End Get
		Set(ByVal value As Global.System.ComponentModel.Container)
			m_privateObject.SetField("components", value)
		End Set
	End Property

	Friend Sub PrivateInit()
            Dim args() As Object = {}
		m_privateObject.Invoke("PrivateInit", New System.Type(){}, args)
	End Sub

	Friend Sub Dispose(ByVal disposing As Boolean)
            Dim args() As Object = {disposing}
		m_privateObject.Invoke("Dispose", New System.Type() { GetType(Boolean)}, args)
	End Sub

	Friend Sub OnTextChange(ByVal sender As Object, ByVal e As Global.System.EventArgs)
            Dim args() As Object = {sender, e}
		m_privateObject.Invoke("OnTextChange", New System.Type() { GetType(Object), GetType(Global.System.EventArgs)}, args)
	End Sub

	Friend Sub OnDragEnter(ByVal sender As Object, ByVal e As Global.System.Windows.Forms.DragEventArgs)
            Dim args() As Object = {sender, e}
		m_privateObject.Invoke("OnDragEnter", New System.Type() { GetType(Object), GetType(Global.System.Windows.Forms.DragEventArgs)}, args)
	End Sub

	Friend Sub OnDragDrop(ByVal sender As Object, ByVal e As Global.System.Windows.Forms.DragEventArgs)
            Dim args() As Object = {sender, e}
		m_privateObject.Invoke("OnDragDrop", New System.Type() { GetType(Object), GetType(Global.System.Windows.Forms.DragEventArgs)}, args)
	End Sub

	Friend Function CanEditFile() As Boolean
            Dim args() As Object = {}
		Dim ret As Boolean = (CBool(m_privateObject.Invoke("CanEditFile", New System.Type(){}, args)))
		Return ret
	End Function

	Friend Sub NotifyDocChanged()
            Dim args() As Object = {}
		m_privateObject.Invoke("NotifyDocChanged", New System.Type(){}, args)
	End Sub
End Class
<System.Diagnostics.DebuggerStepThrough(), System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")> _
Friend Class Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_EditorFactoryAccessor
	Inherits BaseAccessor

        Protected Shared m_privateType As New Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(GetType(Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorFactory))

	Friend Sub New(ByVal target As Global.Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorFactory)
		MyBase.New(target, m_privateType)
	End Sub

	Friend Property vsServiceProvider() As Global.Microsoft.VisualStudio.Shell.ServiceProvider
		Get
			Dim ret As Global.Microsoft.VisualStudio.Shell.ServiceProvider = (CType(m_privateObject.GetField("vsServiceProvider"), Global.Microsoft.VisualStudio.Shell.ServiceProvider))
			Return ret
		End Get
		Set(ByVal value As Global.Microsoft.VisualStudio.Shell.ServiceProvider)
			m_privateObject.SetField("vsServiceProvider", value)
		End Set
	End Property

	Friend Sub Dispose(ByVal disposing As Boolean)
            Dim args() As Object = {disposing}
		m_privateObject.Invoke("Dispose", New System.Type() { GetType(Boolean)}, args)
	End Sub
End Class
End Namespace

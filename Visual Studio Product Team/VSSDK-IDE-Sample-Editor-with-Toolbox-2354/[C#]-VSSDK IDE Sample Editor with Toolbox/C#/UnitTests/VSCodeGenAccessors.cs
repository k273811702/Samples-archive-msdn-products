
/***************************************************************************

Copyright (c) Microsoft Corporation. All rights reserved.
This code is licensed under the Visual Studio SDK license terms.
THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.

***************************************************************************/

// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.UnitTests
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }

    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type)
        :
            this(null, type)
    {
    }

    internal virtual object Target
    {
        get
        {
            return m_privateObject.Target;
        }
    }

    public override string ToString()
    {
        return this.Target.ToString();
    }

    public override bool Equals(object obj)
    {
        if (typeof(BaseAccessor).IsInstanceOfType(obj))
        {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }

    public override int GetHashCode()
    {
        return this.Target.GetHashCode();
    }
}

[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_EditorControlAccessor : BaseAccessor
{

    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorControl));

    internal Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_EditorControlAccessor(global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorControl target)
        :
            base(target, m_privateType)
    {
    }

    internal void InitializeComponent()
    {
        object[] args = new object[0];
        m_privateObject.Invoke("InitializeComponent", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_EditorPackageAccessor : BaseAccessor
{

    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorPackage));

    internal Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_EditorPackageAccessor(global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorPackage target)
        :
            base(target, m_privateType)
    {
    }

    internal global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorFactory editorFactory
    {
        get
        {
            global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorFactory ret = ((global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorFactory)(m_privateObject.GetField("editorFactory")));
            return ret;
        }
        set
        {
            m_privateObject.SetField("editorFactory", value);
        }
    }

   

    internal void Initialize()
    {
        object[] args = new object[0];
        m_privateObject.Invoke("Initialize", new System.Type[0], args);
    }

    internal void Dispose(bool disposing)
    {
        object[] args = new object[] {
                disposing};
        m_privateObject.Invoke("Dispose", new System.Type[] {
                    typeof(bool)}, args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_ToolboxItemDataAccessor : BaseAccessor
{

    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.ToolboxItemData));

    internal Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_ToolboxItemDataAccessor(global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.ToolboxItemData target)
        :
            base(target, m_privateType)
    {
    }

    internal string content
    {
        get
        {
            string ret = ((string)(m_privateObject.GetField("content")));
            return ret;
        }
        set
        {
            m_privateObject.SetField("content", value);
        }
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_GuidListAccessor : BaseAccessor
{

    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("EditorWithToolbox", "Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.GuidList");

    internal Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_GuidListAccessor(object target)
        :
            base(target, m_privateType)
    {
    }

    internal static global::System.Guid guidEditorCmdSet
    {
        get
        {
            global::System.Guid ret = ((global::System.Guid)(m_privateType.GetStaticField("guidEditorCmdSet")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("guidEditorCmdSet", value);
        }
    }
    
    internal static global::System.Guid guidEditorFactory {
        get {
            global::System.Guid ret = ((global::System.Guid)(m_privateType.GetStaticField("guidEditorFactory")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("guidEditorFactory", value);
        }
    }
    
    internal static object CreatePrivate() {
        object[] args = new object[0];
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("EditorWithToolbox", "Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.GuidList", new System.Type[0], args);
        return priv_obj.Target;
    }
}

[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]

    internal class Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_EditorPaneAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorPane));
    
    internal Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_EditorPaneAccessor(global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorPane target) : 
            base(target, m_privateType) {
    }
    
    internal static uint fileFormat {
        get {
            uint ret = ((uint)(m_privateType.GetStaticField("fileFormat")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("fileFormat", value);
        }
    }
    
    internal static string fileExtension {
        get {
            string ret = ((string)(m_privateType.GetStaticField("fileExtension")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("fileExtension", value);
        }
    }
    
    internal static char endLine {
        get {
            char ret = ((char)(m_privateType.GetStaticField("endLine")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("endLine", value);
        }
    }
    
    internal global::Microsoft.VisualStudio.Shell.OleDataObject toolboxData {
        get {
            global::Microsoft.VisualStudio.Shell.OleDataObject ret = ((global::Microsoft.VisualStudio.Shell.OleDataObject)(m_privateObject.GetField("toolboxData")));
            return ret;
        }
        set {
            m_privateObject.SetField("toolboxData", value);
        }
    }
    
    internal string fileName {
        get {
            string ret = ((string)(m_privateObject.GetField("fileName")));
            return ret;
        }
        set {
            m_privateObject.SetField("fileName", value);
        }
    }
    
    internal bool isDirty {
        get {
            bool ret = ((bool)(m_privateObject.GetField("isDirty")));
            return ret;
        }
        set {
            m_privateObject.SetField("isDirty", value);
        }
    }
    
    internal bool loading {
        get {
            bool ret = ((bool)(m_privateObject.GetField("loading")));
            return ret;
        }
        set {
            m_privateObject.SetField("loading", value);
        }
    }
    
    internal bool gettingCheckoutStatus {
        get {
            bool ret = ((bool)(m_privateObject.GetField("gettingCheckoutStatus")));
            return ret;
        }
        set {
            m_privateObject.SetField("gettingCheckoutStatus", value);
        }
    }
    
    internal bool noScribbleMode {
        get {
            bool ret = ((bool)(m_privateObject.GetField("noScribbleMode")));
            return ret;
        }
        set {
            m_privateObject.SetField("noScribbleMode", value);
        }
    }
    
    internal global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorControl editorControl {
        get {
            global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorControl ret = ((global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorControl)(m_privateObject.GetField("editorControl")));
            return ret;
        }
        set {
            m_privateObject.SetField("editorControl", value);
        }
    }
    
    internal global::System.ComponentModel.Container components {
        get {
            global::System.ComponentModel.Container ret = ((global::System.ComponentModel.Container)(m_privateObject.GetField("components")));
            return ret;
        }
        set {
            m_privateObject.SetField("components", value);
        }
    }
    
    internal void PrivateInit() {
        object[] args = new object[0];
        m_privateObject.Invoke("PrivateInit", new System.Type[0], args);
    }
    
    internal void Dispose(bool disposing) {
        object[] args = new object[] {
                disposing};
        m_privateObject.Invoke("Dispose", new System.Type[] {
                    typeof(bool)}, args);
    }
    
    internal void OnTextChange(object sender, global::System.EventArgs e) {
        object[] args = new object[] {
                sender,
                e};
        m_privateObject.Invoke("OnTextChange", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
    }
    
    internal void OnDragEnter(object sender, global::System.Windows.Forms.DragEventArgs e) {
        object[] args = new object[] {
                sender,
                e};
        m_privateObject.Invoke("OnDragEnter", new System.Type[] {
                    typeof(object),
                    typeof(global::System.Windows.Forms.DragEventArgs)}, args);
    }
    
    internal void OnDragDrop(object sender, global::System.Windows.Forms.DragEventArgs e) {
        object[] args = new object[] {
                sender,
                e};
        m_privateObject.Invoke("OnDragDrop", new System.Type[] {
                    typeof(object),
                    typeof(global::System.Windows.Forms.DragEventArgs)}, args);
    }
    
    internal bool CanEditFile() {
        object[] args = new object[0];
        bool ret = ((bool)(m_privateObject.Invoke("CanEditFile", new System.Type[0], args)));
        return ret;
    }
    
    internal void NotifyDocChanged() {
        object[] args = new object[0];
        m_privateObject.Invoke("NotifyDocChanged", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_EditorFactoryAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorFactory));
    
    internal Microsoft_Samples_VisualStudio_IDE_EditorWithToolbox_EditorFactoryAccessor(global::Microsoft.Samples.VisualStudio.IDE.EditorWithToolbox.EditorFactory target) : 
            base(target, m_privateType) {
    }
    
    internal global::Microsoft.VisualStudio.Shell.ServiceProvider vsServiceProvider {
        get {
            global::Microsoft.VisualStudio.Shell.ServiceProvider ret = ((global::Microsoft.VisualStudio.Shell.ServiceProvider)(m_privateObject.GetField("vsServiceProvider")));
            return ret;
        }
        set {
            m_privateObject.SetField("vsServiceProvider", value);
        }
    }
    
    internal void Dispose(bool disposing) {
        object[] args = new object[] {
                disposing};
        m_privateObject.Invoke("Dispose", new System.Type[] {
                    typeof(bool)}, args);
    }
}
}

' PowerPoint 2010/2007

' Work with table background formatting.
' Although PowerPoint 2007 added a TableBackground class
' to support the Table.Background property, it doesn't allow you
' to set formatting of the table background, because of limitations
' of the object model. Without a way to emulate the No Fill option in the
' user interface, there's no way to change the background settings.

' This example works around that limitation by setting properties
' for each cell individually. Unfortunately, this requires a separate
' procedure for each type of setting you want to change.

' In this example, copy the code into a module in a new PowerPoint presentation.
' Put your cursor inside the WorkWithTableBackground procedure, and press
' F8 to start debugging, and then Shift+F8 to continue. Tile the VBA and
' PowerPoint windows so you can watch both at the same time.

Sub WorkWithTableBackground()
    Dim pres As Presentation
    Set pres = ActivePresentation
   
    ' Create a slide with a table on it:
    Dim sld As Slide
    Set sld = pres.Slides.Add(2, ppLayoutTable)
   
    Dim tbl As Table
    Set tbl = sld.Shapes.AddTable(4, 4).Table
    ' Fill the table with data:
    FillTable tbl
         
    ' Retrieve Background property:
    Dim tb As TableBackground
    Set tb = tbl.Background
   
    ' Should be able to do this:
    tb.Fill.ForeColor.ObjectThemeColor = msoThemeColorAccent2
   
    ' But that doesn't work, because when you create a table,
    ' you must also set its fill to None (as you can in the user interface).
    ' There doesn't appear to be any way to do that from VBA. Therefore,
    ' you must rely on a procedure like SetTableColor or SetTableTexture,
    ' which handles each cell individually.
   
    ' This procedure sets the cell color:
    SetTableColor tbl, msoThemeColorAccent2
   
    ' This procedure sets the cell texture:
    SetTableTexture tbl, msoTextureCork
End Sub

Sub FillTable(tbl As Table)
   
    ' Fill a table with sample data.
    Dim row As Integer
    Dim col As Integer
   
    For col = 1 To tbl.Columns.Count
        tbl.Cell(1, col).Shape.TextFrame.TextRange.Text = "Heading " & col
    Next col
   
    Dim shp As Shape
   
    For row = 2 To tbl.Rows.Count
        For col = 1 To tbl.Columns.Count
            Set shp = tbl.Cell(row, col).Shape
            shp.TextFrame.TextRange.Text = "Cell " & row & ", " & col
            shp.Fill.Visible = msoFalse
        Next col
    Next row
End Sub

Sub SetTableColor(tbl As Table, themeColor As MsoThemeColorIndex)
    ' Iterate through rows and columns and set the color
    ' for each cell individually. You must use code like this
    ' cause you cannot override the built-in background for a table.
    Dim row As Integer
    Dim col As Integer
   
    For col = 1 To tbl.Columns.Count
        For row = 1 To tbl.Rows.Count
        Dim Fill As Integer
            tbl.Cell(row, col).Shape.Fill.ForeColor.ObjectThemeColor = themeColor
        Next row
    Next col
End Sub

Sub SetTableTexture(tbl As Table, texture As MsoPresetTexture)
    ' Iterate through rows and columns and set the texture
    ' for each cell individually. You must use code like this
    ' cause you cannot override the built-in background for a table.
    Dim row As Integer
    Dim col As Integer
   
    For col = 1 To tbl.Columns.Count
        For row = 1 To tbl.Rows.Count
        Dim Fill As Integer
            tbl.Cell(row, col).Shape.Fill.PresetTextured texture
        Next row
    Next col
End Sub
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Contoso.Services.SiteManager.AppWeb.SiteManager {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SiteData", Namespace="http://schemas.datacontract.org/2004/07/Contoso.Services.SiteManager.Services")]
    [System.SerializableAttribute()]
    public partial class SiteData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LcIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerLoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondaryContactLoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebTemplateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LcId {
            get {
                return this.LcIdField;
            }
            set {
                if ((object.ReferenceEquals(this.LcIdField, value) != true)) {
                    this.LcIdField = value;
                    this.RaisePropertyChanged("LcId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerLogin {
            get {
                return this.OwnerLoginField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerLoginField, value) != true)) {
                    this.OwnerLoginField = value;
                    this.RaisePropertyChanged("OwnerLogin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondaryContactLogin {
            get {
                return this.SecondaryContactLoginField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondaryContactLoginField, value) != true)) {
                    this.SecondaryContactLoginField = value;
                    this.RaisePropertyChanged("SecondaryContactLogin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebTemplate {
            get {
                return this.WebTemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.WebTemplateField, value) != true)) {
                    this.WebTemplateField = value;
                    this.RaisePropertyChanged("WebTemplate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SiteManager.ISiteManager")]
    public interface ISiteManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISiteManager/CreateSiteCollection", ReplyAction="http://tempuri.org/ISiteManager/CreateSiteCollectionResponse")]
        string CreateSiteCollection(Contoso.Services.SiteManager.AppWeb.SiteManager.SiteData site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISiteManager/CreateSiteCollection", ReplyAction="http://tempuri.org/ISiteManager/CreateSiteCollectionResponse")]
        System.Threading.Tasks.Task<string> CreateSiteCollectionAsync(Contoso.Services.SiteManager.AppWeb.SiteManager.SiteData site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISiteManager/ListSiteCollections", ReplyAction="http://tempuri.org/ISiteManager/ListSiteCollectionsResponse")]
        System.Collections.Generic.List<Contoso.Services.SiteManager.AppWeb.SiteManager.SiteData> ListSiteCollections();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISiteManager/ListSiteCollections", ReplyAction="http://tempuri.org/ISiteManager/ListSiteCollectionsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Contoso.Services.SiteManager.AppWeb.SiteManager.SiteData>> ListSiteCollectionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISiteManager/CreateContentType", ReplyAction="http://tempuri.org/ISiteManager/CreateContentTypeResponse")]
        string CreateContentType(string contentTypeId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISiteManager/CreateContentType", ReplyAction="http://tempuri.org/ISiteManager/CreateContentTypeResponse")]
        System.Threading.Tasks.Task<string> CreateContentTypeAsync(string contentTypeId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISiteManager/SetDocumentInformationPolicySetting", ReplyAction="http://tempuri.org/ISiteManager/SetDocumentInformationPolicySettingResponse")]
        bool SetDocumentInformationPolicySetting(string siteColUrl, string actionManifest, string contentTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISiteManager/SetDocumentInformationPolicySetting", ReplyAction="http://tempuri.org/ISiteManager/SetDocumentInformationPolicySettingResponse")]
        System.Threading.Tasks.Task<bool> SetDocumentInformationPolicySettingAsync(string siteColUrl, string actionManifest, string contentTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISiteManager/GetDocumentInformationPolicySetting", ReplyAction="http://tempuri.org/ISiteManager/GetDocumentInformationPolicySettingResponse")]
        string GetDocumentInformationPolicySetting(string siteColUrl, string contentTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISiteManager/GetDocumentInformationPolicySetting", ReplyAction="http://tempuri.org/ISiteManager/GetDocumentInformationPolicySettingResponse")]
        System.Threading.Tasks.Task<string> GetDocumentInformationPolicySettingAsync(string siteColUrl, string contentTypeId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISiteManagerChannel : Contoso.Services.SiteManager.AppWeb.SiteManager.ISiteManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SiteManagerClient : System.ServiceModel.ClientBase<Contoso.Services.SiteManager.AppWeb.SiteManager.ISiteManager>, Contoso.Services.SiteManager.AppWeb.SiteManager.ISiteManager {
        
        public SiteManagerClient() {
        }
        
        public SiteManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SiteManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SiteManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SiteManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CreateSiteCollection(Contoso.Services.SiteManager.AppWeb.SiteManager.SiteData site) {
            return base.Channel.CreateSiteCollection(site);
        }
        
        public System.Threading.Tasks.Task<string> CreateSiteCollectionAsync(Contoso.Services.SiteManager.AppWeb.SiteManager.SiteData site) {
            return base.Channel.CreateSiteCollectionAsync(site);
        }
        
        public System.Collections.Generic.List<Contoso.Services.SiteManager.AppWeb.SiteManager.SiteData> ListSiteCollections() {
            return base.Channel.ListSiteCollections();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Contoso.Services.SiteManager.AppWeb.SiteManager.SiteData>> ListSiteCollectionsAsync() {
            return base.Channel.ListSiteCollectionsAsync();
        }
        
        public string CreateContentType(string contentTypeId, string name) {
            return base.Channel.CreateContentType(contentTypeId, name);
        }
        
        public System.Threading.Tasks.Task<string> CreateContentTypeAsync(string contentTypeId, string name) {
            return base.Channel.CreateContentTypeAsync(contentTypeId, name);
        }
        
        public bool SetDocumentInformationPolicySetting(string siteColUrl, string actionManifest, string contentTypeId) {
            return base.Channel.SetDocumentInformationPolicySetting(siteColUrl, actionManifest, contentTypeId);
        }
        
        public System.Threading.Tasks.Task<bool> SetDocumentInformationPolicySettingAsync(string siteColUrl, string actionManifest, string contentTypeId) {
            return base.Channel.SetDocumentInformationPolicySettingAsync(siteColUrl, actionManifest, contentTypeId);
        }
        
        public string GetDocumentInformationPolicySetting(string siteColUrl, string contentTypeId) {
            return base.Channel.GetDocumentInformationPolicySetting(siteColUrl, contentTypeId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentInformationPolicySettingAsync(string siteColUrl, string contentTypeId) {
            return base.Channel.GetDocumentInformationPolicySettingAsync(siteColUrl, contentTypeId);
        }
    }
}

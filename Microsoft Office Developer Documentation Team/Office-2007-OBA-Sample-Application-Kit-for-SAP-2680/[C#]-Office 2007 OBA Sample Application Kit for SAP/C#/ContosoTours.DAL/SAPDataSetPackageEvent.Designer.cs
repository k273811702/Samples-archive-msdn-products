//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Microsoft.SAPSK.ContosoTours.DAL {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SAPDataSetPackageEvent")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SAPDataSetPackageEvent : global::System.Data.DataSet {
        
        private PackageEventDataTable tablePackageEvent;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SAPDataSetPackageEvent() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SAPDataSetPackageEvent(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PackageEvent"] != null)) {
                    base.Tables.Add(new PackageEventDataTable(ds.Tables["PackageEvent"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PackageEventDataTable PackageEvent {
            get {
                return this.tablePackageEvent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SAPDataSetPackageEvent cln = ((SAPDataSetPackageEvent)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PackageEvent"] != null)) {
                    base.Tables.Add(new PackageEventDataTable(ds.Tables["PackageEvent"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePackageEvent = ((PackageEventDataTable)(base.Tables["PackageEvent"]));
            if ((initTable == true)) {
                if ((this.tablePackageEvent != null)) {
                    this.tablePackageEvent.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SAPDataSetPackageEvent";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePackageEvent = new PackageEventDataTable();
            base.Tables.Add(this.tablePackageEvent);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePackageEvent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SAPDataSetPackageEvent ds = new SAPDataSetPackageEvent();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void PackageEventRowChangeEventHandler(object sender, PackageEventRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PackageEventDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnVenueID;
            
            private global::System.Data.DataColumn columnEventName;
            
            private global::System.Data.DataColumn columnEventDescription;
            
            private global::System.Data.DataColumn columnEventPhoto;
            
            private global::System.Data.DataColumn columnEventDate;
            
            private global::System.Data.DataColumn columnGoldPackagePrice;
            
            private global::System.Data.DataColumn columnSilverPackagePrice;
            
            private global::System.Data.DataColumn columnBronzePackagePrice;
            
            private global::System.Data.DataColumn columnGoldPackageTrueCost;
            
            private global::System.Data.DataColumn columnSilverPackageTrueCost;
            
            private global::System.Data.DataColumn columnBronzePackageTrueCost;
            
            private global::System.Data.DataColumn columnEventTotalCost;
            
            private global::System.Data.DataColumn columnEventTypeName;
            
            private global::System.Data.DataColumn columnVenueName;
            
            private global::System.Data.DataColumn columnVenueCity;
            
            private global::System.Data.DataColumn columnVenueState;
            
            private global::System.Data.DataColumn columnPackageID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageEventDataTable() {
                this.TableName = "PackageEvent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PackageEventDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PackageEventDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VenueIDColumn {
                get {
                    return this.columnVenueID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventNameColumn {
                get {
                    return this.columnEventName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDescriptionColumn {
                get {
                    return this.columnEventDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventPhotoColumn {
                get {
                    return this.columnEventPhoto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDateColumn {
                get {
                    return this.columnEventDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoldPackagePriceColumn {
                get {
                    return this.columnGoldPackagePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SilverPackagePriceColumn {
                get {
                    return this.columnSilverPackagePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BronzePackagePriceColumn {
                get {
                    return this.columnBronzePackagePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoldPackageTrueCostColumn {
                get {
                    return this.columnGoldPackageTrueCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SilverPackageTrueCostColumn {
                get {
                    return this.columnSilverPackageTrueCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BronzePackageTrueCostColumn {
                get {
                    return this.columnBronzePackageTrueCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventTotalCostColumn {
                get {
                    return this.columnEventTotalCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventTypeNameColumn {
                get {
                    return this.columnEventTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VenueNameColumn {
                get {
                    return this.columnVenueName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VenueCityColumn {
                get {
                    return this.columnVenueCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VenueStateColumn {
                get {
                    return this.columnVenueState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PackageIDColumn {
                get {
                    return this.columnPackageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageEventRow this[int index] {
                get {
                    return ((PackageEventRow)(this.Rows[index]));
                }
            }
            
            public event PackageEventRowChangeEventHandler PackageEventRowChanging;
            
            public event PackageEventRowChangeEventHandler PackageEventRowChanged;
            
            public event PackageEventRowChangeEventHandler PackageEventRowDeleting;
            
            public event PackageEventRowChangeEventHandler PackageEventRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPackageEventRow(PackageEventRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageEventRow AddPackageEventRow(
                        int VenueID, 
                        string EventName, 
                        string EventDescription, 
                        byte[] EventPhoto, 
                        System.DateTime EventDate, 
                        decimal GoldPackagePrice, 
                        decimal SilverPackagePrice, 
                        decimal BronzePackagePrice, 
                        decimal GoldPackageTrueCost, 
                        decimal SilverPackageTrueCost, 
                        decimal BronzePackageTrueCost, 
                        decimal EventTotalCost, 
                        string EventTypeName, 
                        string VenueName, 
                        string VenueCity, 
                        string VenueState, 
                        int PackageID) {
                PackageEventRow rowPackageEventRow = ((PackageEventRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        VenueID,
                        EventName,
                        EventDescription,
                        EventPhoto,
                        EventDate,
                        GoldPackagePrice,
                        SilverPackagePrice,
                        BronzePackagePrice,
                        GoldPackageTrueCost,
                        SilverPackageTrueCost,
                        BronzePackageTrueCost,
                        EventTotalCost,
                        EventTypeName,
                        VenueName,
                        VenueCity,
                        VenueState,
                        PackageID};
                rowPackageEventRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPackageEventRow);
                return rowPackageEventRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PackageEventDataTable cln = ((PackageEventDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PackageEventDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEventID = base.Columns["EventID"];
                this.columnVenueID = base.Columns["VenueID"];
                this.columnEventName = base.Columns["EventName"];
                this.columnEventDescription = base.Columns["EventDescription"];
                this.columnEventPhoto = base.Columns["EventPhoto"];
                this.columnEventDate = base.Columns["EventDate"];
                this.columnGoldPackagePrice = base.Columns["GoldPackagePrice"];
                this.columnSilverPackagePrice = base.Columns["SilverPackagePrice"];
                this.columnBronzePackagePrice = base.Columns["BronzePackagePrice"];
                this.columnGoldPackageTrueCost = base.Columns["GoldPackageTrueCost"];
                this.columnSilverPackageTrueCost = base.Columns["SilverPackageTrueCost"];
                this.columnBronzePackageTrueCost = base.Columns["BronzePackageTrueCost"];
                this.columnEventTotalCost = base.Columns["EventTotalCost"];
                this.columnEventTypeName = base.Columns["EventTypeName"];
                this.columnVenueName = base.Columns["VenueName"];
                this.columnVenueCity = base.Columns["VenueCity"];
                this.columnVenueState = base.Columns["VenueState"];
                this.columnPackageID = base.Columns["PackageID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnVenueID = new global::System.Data.DataColumn("VenueID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVenueID);
                this.columnEventName = new global::System.Data.DataColumn("EventName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventName);
                this.columnEventDescription = new global::System.Data.DataColumn("EventDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDescription);
                this.columnEventPhoto = new global::System.Data.DataColumn("EventPhoto", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventPhoto);
                this.columnEventDate = new global::System.Data.DataColumn("EventDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDate);
                this.columnGoldPackagePrice = new global::System.Data.DataColumn("GoldPackagePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoldPackagePrice);
                this.columnSilverPackagePrice = new global::System.Data.DataColumn("SilverPackagePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSilverPackagePrice);
                this.columnBronzePackagePrice = new global::System.Data.DataColumn("BronzePackagePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBronzePackagePrice);
                this.columnGoldPackageTrueCost = new global::System.Data.DataColumn("GoldPackageTrueCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoldPackageTrueCost);
                this.columnSilverPackageTrueCost = new global::System.Data.DataColumn("SilverPackageTrueCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSilverPackageTrueCost);
                this.columnBronzePackageTrueCost = new global::System.Data.DataColumn("BronzePackageTrueCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBronzePackageTrueCost);
                this.columnEventTotalCost = new global::System.Data.DataColumn("EventTotalCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventTotalCost);
                this.columnEventTypeName = new global::System.Data.DataColumn("EventTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventTypeName);
                this.columnVenueName = new global::System.Data.DataColumn("VenueName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVenueName);
                this.columnVenueCity = new global::System.Data.DataColumn("VenueCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVenueCity);
                this.columnVenueState = new global::System.Data.DataColumn("VenueState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVenueState);
                this.columnPackageID = new global::System.Data.DataColumn("PackageID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageID);
                this.columnEventID.AutoIncrement = true;
                this.columnEventID.AllowDBNull = false;
                this.columnEventID.ReadOnly = true;
                this.columnVenueID.AllowDBNull = false;
                this.columnEventName.AllowDBNull = false;
                this.columnEventName.MaxLength = 255;
                this.columnEventDescription.AllowDBNull = false;
                this.columnEventDescription.MaxLength = 4000;
                this.columnEventPhoto.AllowDBNull = false;
                this.columnEventDate.AllowDBNull = false;
                this.columnGoldPackagePrice.AllowDBNull = false;
                this.columnSilverPackagePrice.AllowDBNull = false;
                this.columnBronzePackagePrice.AllowDBNull = false;
                this.columnGoldPackageTrueCost.AllowDBNull = false;
                this.columnSilverPackageTrueCost.AllowDBNull = false;
                this.columnBronzePackageTrueCost.AllowDBNull = false;
                this.columnEventTotalCost.AllowDBNull = false;
                this.columnEventTypeName.AllowDBNull = false;
                this.columnEventTypeName.MaxLength = 255;
                this.columnVenueName.AllowDBNull = false;
                this.columnVenueName.MaxLength = 255;
                this.columnVenueCity.AllowDBNull = false;
                this.columnVenueCity.MaxLength = 255;
                this.columnVenueState.AllowDBNull = false;
                this.columnVenueState.MaxLength = 255;
                this.columnPackageID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageEventRow NewPackageEventRow() {
                return ((PackageEventRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PackageEventRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PackageEventRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PackageEventRowChanged != null)) {
                    this.PackageEventRowChanged(this, new PackageEventRowChangeEvent(((PackageEventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PackageEventRowChanging != null)) {
                    this.PackageEventRowChanging(this, new PackageEventRowChangeEvent(((PackageEventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PackageEventRowDeleted != null)) {
                    this.PackageEventRowDeleted(this, new PackageEventRowChangeEvent(((PackageEventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PackageEventRowDeleting != null)) {
                    this.PackageEventRowDeleting(this, new PackageEventRowChangeEvent(((PackageEventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePackageEventRow(PackageEventRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SAPDataSetPackageEvent ds = new SAPDataSetPackageEvent();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PackageEventDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PackageEventRow : global::System.Data.DataRow {
            
            private PackageEventDataTable tablePackageEvent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PackageEventRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePackageEvent = ((PackageEventDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    return ((int)(this[this.tablePackageEvent.EventIDColumn]));
                }
                set {
                    this[this.tablePackageEvent.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VenueID {
                get {
                    return ((int)(this[this.tablePackageEvent.VenueIDColumn]));
                }
                set {
                    this[this.tablePackageEvent.VenueIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventName {
                get {
                    return ((string)(this[this.tablePackageEvent.EventNameColumn]));
                }
                set {
                    this[this.tablePackageEvent.EventNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventDescription {
                get {
                    return ((string)(this[this.tablePackageEvent.EventDescriptionColumn]));
                }
                set {
                    this[this.tablePackageEvent.EventDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] EventPhoto {
                get {
                    return ((byte[])(this[this.tablePackageEvent.EventPhotoColumn]));
                }
                set {
                    this[this.tablePackageEvent.EventPhotoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EventDate {
                get {
                    return ((global::System.DateTime)(this[this.tablePackageEvent.EventDateColumn]));
                }
                set {
                    this[this.tablePackageEvent.EventDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GoldPackagePrice {
                get {
                    return ((decimal)(this[this.tablePackageEvent.GoldPackagePriceColumn]));
                }
                set {
                    this[this.tablePackageEvent.GoldPackagePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SilverPackagePrice {
                get {
                    return ((decimal)(this[this.tablePackageEvent.SilverPackagePriceColumn]));
                }
                set {
                    this[this.tablePackageEvent.SilverPackagePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BronzePackagePrice {
                get {
                    return ((decimal)(this[this.tablePackageEvent.BronzePackagePriceColumn]));
                }
                set {
                    this[this.tablePackageEvent.BronzePackagePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GoldPackageTrueCost {
                get {
                    return ((decimal)(this[this.tablePackageEvent.GoldPackageTrueCostColumn]));
                }
                set {
                    this[this.tablePackageEvent.GoldPackageTrueCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SilverPackageTrueCost {
                get {
                    return ((decimal)(this[this.tablePackageEvent.SilverPackageTrueCostColumn]));
                }
                set {
                    this[this.tablePackageEvent.SilverPackageTrueCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BronzePackageTrueCost {
                get {
                    return ((decimal)(this[this.tablePackageEvent.BronzePackageTrueCostColumn]));
                }
                set {
                    this[this.tablePackageEvent.BronzePackageTrueCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EventTotalCost {
                get {
                    return ((decimal)(this[this.tablePackageEvent.EventTotalCostColumn]));
                }
                set {
                    this[this.tablePackageEvent.EventTotalCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventTypeName {
                get {
                    return ((string)(this[this.tablePackageEvent.EventTypeNameColumn]));
                }
                set {
                    this[this.tablePackageEvent.EventTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VenueName {
                get {
                    return ((string)(this[this.tablePackageEvent.VenueNameColumn]));
                }
                set {
                    this[this.tablePackageEvent.VenueNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VenueCity {
                get {
                    return ((string)(this[this.tablePackageEvent.VenueCityColumn]));
                }
                set {
                    this[this.tablePackageEvent.VenueCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VenueState {
                get {
                    return ((string)(this[this.tablePackageEvent.VenueStateColumn]));
                }
                set {
                    this[this.tablePackageEvent.VenueStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PackageID {
                get {
                    return ((int)(this[this.tablePackageEvent.PackageIDColumn]));
                }
                set {
                    this[this.tablePackageEvent.PackageIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PackageEventRowChangeEvent : global::System.EventArgs {
            
            private PackageEventRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageEventRowChangeEvent(PackageEventRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageEventRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
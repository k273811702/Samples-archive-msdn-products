//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Microsoft.SAPSK.ContosoTours.Schema {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PackageInfo")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PackageInfo : global::System.Data.DataSet {
        
        private PackageDataTable tablePackage;
        
        private EventDataTable tableEvent;
        
        private FlightDataTable tableFlight;
        
        private global::System.Data.DataRelation relationEvent_Flight;
        
        private global::System.Data.DataRelation relationPackage_Event;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PackageInfo() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PackageInfo(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Package"] != null)) {
                    base.Tables.Add(new PackageDataTable(ds.Tables["Package"]));
                }
                if ((ds.Tables["Event"] != null)) {
                    base.Tables.Add(new EventDataTable(ds.Tables["Event"]));
                }
                if ((ds.Tables["Flight"] != null)) {
                    base.Tables.Add(new FlightDataTable(ds.Tables["Flight"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PackageDataTable Package {
            get {
                return this.tablePackage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EventDataTable Event {
            get {
                return this.tableEvent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FlightDataTable Flight {
            get {
                return this.tableFlight;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PackageInfo cln = ((PackageInfo)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Package"] != null)) {
                    base.Tables.Add(new PackageDataTable(ds.Tables["Package"]));
                }
                if ((ds.Tables["Event"] != null)) {
                    base.Tables.Add(new EventDataTable(ds.Tables["Event"]));
                }
                if ((ds.Tables["Flight"] != null)) {
                    base.Tables.Add(new FlightDataTable(ds.Tables["Flight"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePackage = ((PackageDataTable)(base.Tables["Package"]));
            if ((initTable == true)) {
                if ((this.tablePackage != null)) {
                    this.tablePackage.InitVars();
                }
            }
            this.tableEvent = ((EventDataTable)(base.Tables["Event"]));
            if ((initTable == true)) {
                if ((this.tableEvent != null)) {
                    this.tableEvent.InitVars();
                }
            }
            this.tableFlight = ((FlightDataTable)(base.Tables["Flight"]));
            if ((initTable == true)) {
                if ((this.tableFlight != null)) {
                    this.tableFlight.InitVars();
                }
            }
            this.relationEvent_Flight = this.Relations["Event_Flight"];
            this.relationPackage_Event = this.Relations["Package_Event"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PackageInfo";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PackageInfo.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePackage = new PackageDataTable();
            base.Tables.Add(this.tablePackage);
            this.tableEvent = new EventDataTable();
            base.Tables.Add(this.tableEvent);
            this.tableFlight = new FlightDataTable();
            base.Tables.Add(this.tableFlight);
            this.relationEvent_Flight = new global::System.Data.DataRelation("Event_Flight", new global::System.Data.DataColumn[] {
                        this.tableEvent.EventIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableFlight.EventIDColumn}, false);
            this.relationEvent_Flight.Nested = true;
            this.Relations.Add(this.relationEvent_Flight);
            this.relationPackage_Event = new global::System.Data.DataRelation("Package_Event", new global::System.Data.DataColumn[] {
                        this.tablePackage.PackageIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEvent.PackageIDColumn}, false);
            this.relationPackage_Event.Nested = true;
            this.Relations.Add(this.relationPackage_Event);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePackage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEvent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFlight() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PackageInfo ds = new PackageInfo();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void PackageRowChangeEventHandler(object sender, PackageRowChangeEvent e);
        
        public delegate void EventRowChangeEventHandler(object sender, EventRowChangeEvent e);
        
        public delegate void FlightRowChangeEventHandler(object sender, FlightRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PackageDataTable : global::System.Data.TypedTableBase<PackageRow> {
            
            private global::System.Data.DataColumn columnPackageID;
            
            private global::System.Data.DataColumn columnPackageName;
            
            private global::System.Data.DataColumn columnPackageDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageDataTable() {
                this.TableName = "Package";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PackageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PackageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PackageIDColumn {
                get {
                    return this.columnPackageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PackageNameColumn {
                get {
                    return this.columnPackageName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PackageDescriptionColumn {
                get {
                    return this.columnPackageDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageRow this[int index] {
                get {
                    return ((PackageRow)(this.Rows[index]));
                }
            }
            
            public event PackageRowChangeEventHandler PackageRowChanging;
            
            public event PackageRowChangeEventHandler PackageRowChanged;
            
            public event PackageRowChangeEventHandler PackageRowDeleting;
            
            public event PackageRowChangeEventHandler PackageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPackageRow(PackageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageRow AddPackageRow(int PackageID, string PackageName, string PackageDescription) {
                PackageRow rowPackageRow = ((PackageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PackageID,
                        PackageName,
                        PackageDescription};
                rowPackageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPackageRow);
                return rowPackageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageRow FindByPackageID(int PackageID) {
                return ((PackageRow)(this.Rows.Find(new object[] {
                            PackageID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PackageDataTable cln = ((PackageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PackageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPackageID = base.Columns["PackageID"];
                this.columnPackageName = base.Columns["PackageName"];
                this.columnPackageDescription = base.Columns["PackageDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPackageID = new global::System.Data.DataColumn("PackageID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageID);
                this.columnPackageName = new global::System.Data.DataColumn("PackageName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageName);
                this.columnPackageDescription = new global::System.Data.DataColumn("PackageDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPackageID}, true));
                this.columnPackageID.AllowDBNull = false;
                this.columnPackageID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageRow NewPackageRow() {
                return ((PackageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PackageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PackageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PackageRowChanged != null)) {
                    this.PackageRowChanged(this, new PackageRowChangeEvent(((PackageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PackageRowChanging != null)) {
                    this.PackageRowChanging(this, new PackageRowChangeEvent(((PackageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PackageRowDeleted != null)) {
                    this.PackageRowDeleted(this, new PackageRowChangeEvent(((PackageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PackageRowDeleting != null)) {
                    this.PackageRowDeleting(this, new PackageRowChangeEvent(((PackageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePackageRow(PackageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PackageInfo ds = new PackageInfo();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PackageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EventDataTable : global::System.Data.TypedTableBase<EventRow> {
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnPackageID;
            
            private global::System.Data.DataColumn columnEventName;
            
            private global::System.Data.DataColumn columnEventDescription;
            
            private global::System.Data.DataColumn columnEventDate;
            
            private global::System.Data.DataColumn columnVenueName;
            
            private global::System.Data.DataColumn columnGoldAvailability;
            
            private global::System.Data.DataColumn columnSilverAvailability;
            
            private global::System.Data.DataColumn columnBronzeAvailability;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventDataTable() {
                this.TableName = "Event";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EventDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PackageIDColumn {
                get {
                    return this.columnPackageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventNameColumn {
                get {
                    return this.columnEventName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDescriptionColumn {
                get {
                    return this.columnEventDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDateColumn {
                get {
                    return this.columnEventDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VenueNameColumn {
                get {
                    return this.columnVenueName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoldAvailabilityColumn {
                get {
                    return this.columnGoldAvailability;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SilverAvailabilityColumn {
                get {
                    return this.columnSilverAvailability;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BronzeAvailabilityColumn {
                get {
                    return this.columnBronzeAvailability;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow this[int index] {
                get {
                    return ((EventRow)(this.Rows[index]));
                }
            }
            
            public event EventRowChangeEventHandler EventRowChanging;
            
            public event EventRowChangeEventHandler EventRowChanged;
            
            public event EventRowChangeEventHandler EventRowDeleting;
            
            public event EventRowChangeEventHandler EventRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEventRow(EventRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow AddEventRow(int EventID, PackageRow parentPackageRowByPackage_Event, string EventName, string EventDescription, string EventDate, string VenueName, int GoldAvailability, int SilverAvailability, int BronzeAvailability) {
                EventRow rowEventRow = ((EventRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EventID,
                        null,
                        EventName,
                        EventDescription,
                        EventDate,
                        VenueName,
                        GoldAvailability,
                        SilverAvailability,
                        BronzeAvailability};
                if ((parentPackageRowByPackage_Event != null)) {
                    columnValuesArray[1] = parentPackageRowByPackage_Event[0];
                }
                rowEventRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventRow);
                return rowEventRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow FindByEventIDPackageID(int EventID, int PackageID) {
                return ((EventRow)(this.Rows.Find(new object[] {
                            EventID,
                            PackageID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EventDataTable cln = ((EventDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EventDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEventID = base.Columns["EventID"];
                this.columnPackageID = base.Columns["PackageID"];
                this.columnEventName = base.Columns["EventName"];
                this.columnEventDescription = base.Columns["EventDescription"];
                this.columnEventDate = base.Columns["EventDate"];
                this.columnVenueName = base.Columns["VenueName"];
                this.columnGoldAvailability = base.Columns["GoldAvailability"];
                this.columnSilverAvailability = base.Columns["SilverAvailability"];
                this.columnBronzeAvailability = base.Columns["BronzeAvailability"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnPackageID = new global::System.Data.DataColumn("PackageID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageID);
                this.columnEventName = new global::System.Data.DataColumn("EventName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventName);
                this.columnEventDescription = new global::System.Data.DataColumn("EventDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDescription);
                this.columnEventDate = new global::System.Data.DataColumn("EventDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDate);
                this.columnVenueName = new global::System.Data.DataColumn("VenueName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVenueName);
                this.columnGoldAvailability = new global::System.Data.DataColumn("GoldAvailability", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoldAvailability);
                this.columnSilverAvailability = new global::System.Data.DataColumn("SilverAvailability", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSilverAvailability);
                this.columnBronzeAvailability = new global::System.Data.DataColumn("BronzeAvailability", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBronzeAvailability);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEventID,
                                this.columnPackageID}, true));
                this.columnEventID.AllowDBNull = false;
                this.columnPackageID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow NewEventRow() {
                return ((EventRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EventRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EventRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventRowChanged != null)) {
                    this.EventRowChanged(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventRowChanging != null)) {
                    this.EventRowChanging(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventRowDeleted != null)) {
                    this.EventRowDeleted(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventRowDeleting != null)) {
                    this.EventRowDeleting(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEventRow(EventRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PackageInfo ds = new PackageInfo();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EventDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FlightDataTable : global::System.Data.TypedTableBase<FlightRow> {
            
            private global::System.Data.DataColumn columnFlightID;
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnAirline;
            
            private global::System.Data.DataColumn columnFlightDate;
            
            private global::System.Data.DataColumn columnDepartureTime;
            
            private global::System.Data.DataColumn columnAirportFrom;
            
            private global::System.Data.DataColumn columnCityFrom;
            
            private global::System.Data.DataColumn columnAirportTo;
            
            private global::System.Data.DataColumn columnCityTo;
            
            private global::System.Data.DataColumn columnArrivalDate;
            
            private global::System.Data.DataColumn columnArrivalTime;
            
            private global::System.Data.DataColumn columnFirstFree;
            
            private global::System.Data.DataColumn columnBusinessFree;
            
            private global::System.Data.DataColumn columnEconomyFree;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightDataTable() {
                this.TableName = "Flight";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlightDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FlightDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlightIDColumn {
                get {
                    return this.columnFlightID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AirlineColumn {
                get {
                    return this.columnAirline;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlightDateColumn {
                get {
                    return this.columnFlightDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepartureTimeColumn {
                get {
                    return this.columnDepartureTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AirportFromColumn {
                get {
                    return this.columnAirportFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityFromColumn {
                get {
                    return this.columnCityFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AirportToColumn {
                get {
                    return this.columnAirportTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityToColumn {
                get {
                    return this.columnCityTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArrivalDateColumn {
                get {
                    return this.columnArrivalDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArrivalTimeColumn {
                get {
                    return this.columnArrivalTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstFreeColumn {
                get {
                    return this.columnFirstFree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BusinessFreeColumn {
                get {
                    return this.columnBusinessFree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EconomyFreeColumn {
                get {
                    return this.columnEconomyFree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow this[int index] {
                get {
                    return ((FlightRow)(this.Rows[index]));
                }
            }
            
            public event FlightRowChangeEventHandler FlightRowChanging;
            
            public event FlightRowChangeEventHandler FlightRowChanged;
            
            public event FlightRowChangeEventHandler FlightRowDeleting;
            
            public event FlightRowChangeEventHandler FlightRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFlightRow(FlightRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow AddFlightRow(EventRow parentEventRowByEvent_Flight, string Airline, string FlightDate, string DepartureTime, string AirportFrom, string CityFrom, string AirportTo, string CityTo, string ArrivalDate, string ArrivalTime, int FirstFree, int BusinessFree, int EconomyFree) {
                FlightRow rowFlightRow = ((FlightRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Airline,
                        FlightDate,
                        DepartureTime,
                        AirportFrom,
                        CityFrom,
                        AirportTo,
                        CityTo,
                        ArrivalDate,
                        ArrivalTime,
                        FirstFree,
                        BusinessFree,
                        EconomyFree};
                if ((parentEventRowByEvent_Flight != null)) {
                    columnValuesArray[1] = parentEventRowByEvent_Flight[0];
                }
                rowFlightRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFlightRow);
                return rowFlightRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow FindByFlightIDEventID(int FlightID, int EventID) {
                return ((FlightRow)(this.Rows.Find(new object[] {
                            FlightID,
                            EventID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FlightDataTable cln = ((FlightDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FlightDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFlightID = base.Columns["FlightID"];
                this.columnEventID = base.Columns["EventID"];
                this.columnAirline = base.Columns["Airline"];
                this.columnFlightDate = base.Columns["FlightDate"];
                this.columnDepartureTime = base.Columns["DepartureTime"];
                this.columnAirportFrom = base.Columns["AirportFrom"];
                this.columnCityFrom = base.Columns["CityFrom"];
                this.columnAirportTo = base.Columns["AirportTo"];
                this.columnCityTo = base.Columns["CityTo"];
                this.columnArrivalDate = base.Columns["ArrivalDate"];
                this.columnArrivalTime = base.Columns["ArrivalTime"];
                this.columnFirstFree = base.Columns["FirstFree"];
                this.columnBusinessFree = base.Columns["BusinessFree"];
                this.columnEconomyFree = base.Columns["EconomyFree"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFlightID = new global::System.Data.DataColumn("FlightID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlightID);
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnAirline = new global::System.Data.DataColumn("Airline", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAirline);
                this.columnFlightDate = new global::System.Data.DataColumn("FlightDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlightDate);
                this.columnDepartureTime = new global::System.Data.DataColumn("DepartureTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartureTime);
                this.columnAirportFrom = new global::System.Data.DataColumn("AirportFrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAirportFrom);
                this.columnCityFrom = new global::System.Data.DataColumn("CityFrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCityFrom);
                this.columnAirportTo = new global::System.Data.DataColumn("AirportTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAirportTo);
                this.columnCityTo = new global::System.Data.DataColumn("CityTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCityTo);
                this.columnArrivalDate = new global::System.Data.DataColumn("ArrivalDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArrivalDate);
                this.columnArrivalTime = new global::System.Data.DataColumn("ArrivalTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArrivalTime);
                this.columnFirstFree = new global::System.Data.DataColumn("FirstFree", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstFree);
                this.columnBusinessFree = new global::System.Data.DataColumn("BusinessFree", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusinessFree);
                this.columnEconomyFree = new global::System.Data.DataColumn("EconomyFree", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEconomyFree);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFlightID,
                                this.columnEventID}, true));
                this.columnFlightID.AutoIncrement = true;
                this.columnFlightID.AllowDBNull = false;
                this.columnEventID.AllowDBNull = false;
                this.columnAirline.Caption = "FlightConnection";
                this.Namespace = "http://tempuri.org/PackageInfo.xsd";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow NewFlightRow() {
                return ((FlightRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FlightRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FlightRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FlightRowChanged != null)) {
                    this.FlightRowChanged(this, new FlightRowChangeEvent(((FlightRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FlightRowChanging != null)) {
                    this.FlightRowChanging(this, new FlightRowChangeEvent(((FlightRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FlightRowDeleted != null)) {
                    this.FlightRowDeleted(this, new FlightRowChangeEvent(((FlightRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FlightRowDeleting != null)) {
                    this.FlightRowDeleting(this, new FlightRowChangeEvent(((FlightRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFlightRow(FlightRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PackageInfo ds = new PackageInfo();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FlightDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PackageRow : global::System.Data.DataRow {
            
            private PackageDataTable tablePackage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PackageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePackage = ((PackageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PackageID {
                get {
                    return ((int)(this[this.tablePackage.PackageIDColumn]));
                }
                set {
                    this[this.tablePackage.PackageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackageName {
                get {
                    try {
                        return ((string)(this[this.tablePackage.PackageNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PackageName\' in table \'Package\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePackage.PackageNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackageDescription {
                get {
                    try {
                        return ((string)(this[this.tablePackage.PackageDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PackageDescription\' in table \'Package\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePackage.PackageDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPackageNameNull() {
                return this.IsNull(this.tablePackage.PackageNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPackageNameNull() {
                this[this.tablePackage.PackageNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPackageDescriptionNull() {
                return this.IsNull(this.tablePackage.PackageDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPackageDescriptionNull() {
                this[this.tablePackage.PackageDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow[] GetEventRows() {
                if ((this.Table.ChildRelations["Package_Event"] == null)) {
                    return new EventRow[0];
                }
                else {
                    return ((EventRow[])(base.GetChildRows(this.Table.ChildRelations["Package_Event"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EventRow : global::System.Data.DataRow {
            
            private EventDataTable tableEvent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEvent = ((EventDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    return ((int)(this[this.tableEvent.EventIDColumn]));
                }
                set {
                    this[this.tableEvent.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PackageID {
                get {
                    return ((int)(this[this.tableEvent.PackageIDColumn]));
                }
                set {
                    this[this.tableEvent.PackageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventName {
                get {
                    try {
                        return ((string)(this[this.tableEvent.EventNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventName\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.EventNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventDescription {
                get {
                    try {
                        return ((string)(this[this.tableEvent.EventDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventDescription\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.EventDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventDate {
                get {
                    try {
                        return ((string)(this[this.tableEvent.EventDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventDate\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.EventDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VenueName {
                get {
                    try {
                        return ((string)(this[this.tableEvent.VenueNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VenueName\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.VenueNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GoldAvailability {
                get {
                    try {
                        return ((int)(this[this.tableEvent.GoldAvailabilityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GoldAvailability\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.GoldAvailabilityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SilverAvailability {
                get {
                    try {
                        return ((int)(this[this.tableEvent.SilverAvailabilityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SilverAvailability\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.SilverAvailabilityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BronzeAvailability {
                get {
                    try {
                        return ((int)(this[this.tableEvent.BronzeAvailabilityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BronzeAvailability\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.BronzeAvailabilityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageRow PackageRow {
                get {
                    return ((PackageRow)(this.GetParentRow(this.Table.ParentRelations["Package_Event"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Package_Event"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventNameNull() {
                return this.IsNull(this.tableEvent.EventNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventNameNull() {
                this[this.tableEvent.EventNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventDescriptionNull() {
                return this.IsNull(this.tableEvent.EventDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventDescriptionNull() {
                this[this.tableEvent.EventDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventDateNull() {
                return this.IsNull(this.tableEvent.EventDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventDateNull() {
                this[this.tableEvent.EventDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVenueNameNull() {
                return this.IsNull(this.tableEvent.VenueNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVenueNameNull() {
                this[this.tableEvent.VenueNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoldAvailabilityNull() {
                return this.IsNull(this.tableEvent.GoldAvailabilityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoldAvailabilityNull() {
                this[this.tableEvent.GoldAvailabilityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSilverAvailabilityNull() {
                return this.IsNull(this.tableEvent.SilverAvailabilityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSilverAvailabilityNull() {
                this[this.tableEvent.SilverAvailabilityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBronzeAvailabilityNull() {
                return this.IsNull(this.tableEvent.BronzeAvailabilityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBronzeAvailabilityNull() {
                this[this.tableEvent.BronzeAvailabilityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow[] GetFlightRows() {
                if ((this.Table.ChildRelations["Event_Flight"] == null)) {
                    return new FlightRow[0];
                }
                else {
                    return ((FlightRow[])(base.GetChildRows(this.Table.ChildRelations["Event_Flight"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FlightRow : global::System.Data.DataRow {
            
            private FlightDataTable tableFlight;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlightRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFlight = ((FlightDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FlightID {
                get {
                    return ((int)(this[this.tableFlight.FlightIDColumn]));
                }
                set {
                    this[this.tableFlight.FlightIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    return ((int)(this[this.tableFlight.EventIDColumn]));
                }
                set {
                    this[this.tableFlight.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Airline {
                get {
                    try {
                        return ((string)(this[this.tableFlight.AirlineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Airline\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.AirlineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlightDate {
                get {
                    try {
                        return ((string)(this[this.tableFlight.FlightDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlightDate\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.FlightDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartureTime {
                get {
                    try {
                        return ((string)(this[this.tableFlight.DepartureTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepartureTime\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.DepartureTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AirportFrom {
                get {
                    try {
                        return ((string)(this[this.tableFlight.AirportFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AirportFrom\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.AirportFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CityFrom {
                get {
                    try {
                        return ((string)(this[this.tableFlight.CityFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CityFrom\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.CityFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AirportTo {
                get {
                    try {
                        return ((string)(this[this.tableFlight.AirportToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AirportTo\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.AirportToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CityTo {
                get {
                    try {
                        return ((string)(this[this.tableFlight.CityToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CityTo\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.CityToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArrivalDate {
                get {
                    try {
                        return ((string)(this[this.tableFlight.ArrivalDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArrivalDate\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.ArrivalDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArrivalTime {
                get {
                    try {
                        return ((string)(this[this.tableFlight.ArrivalTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArrivalTime\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.ArrivalTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FirstFree {
                get {
                    try {
                        return ((int)(this[this.tableFlight.FirstFreeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstFree\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.FirstFreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BusinessFree {
                get {
                    try {
                        return ((int)(this[this.tableFlight.BusinessFreeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BusinessFree\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.BusinessFreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EconomyFree {
                get {
                    try {
                        return ((int)(this[this.tableFlight.EconomyFreeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EconomyFree\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.EconomyFreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow EventRow {
                get {
                    return ((EventRow)(this.GetParentRow(this.Table.ParentRelations["Event_Flight"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Event_Flight"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAirlineNull() {
                return this.IsNull(this.tableFlight.AirlineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAirlineNull() {
                this[this.tableFlight.AirlineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlightDateNull() {
                return this.IsNull(this.tableFlight.FlightDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlightDateNull() {
                this[this.tableFlight.FlightDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartureTimeNull() {
                return this.IsNull(this.tableFlight.DepartureTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartureTimeNull() {
                this[this.tableFlight.DepartureTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAirportFromNull() {
                return this.IsNull(this.tableFlight.AirportFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAirportFromNull() {
                this[this.tableFlight.AirportFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityFromNull() {
                return this.IsNull(this.tableFlight.CityFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityFromNull() {
                this[this.tableFlight.CityFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAirportToNull() {
                return this.IsNull(this.tableFlight.AirportToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAirportToNull() {
                this[this.tableFlight.AirportToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityToNull() {
                return this.IsNull(this.tableFlight.CityToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityToNull() {
                this[this.tableFlight.CityToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArrivalDateNull() {
                return this.IsNull(this.tableFlight.ArrivalDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArrivalDateNull() {
                this[this.tableFlight.ArrivalDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArrivalTimeNull() {
                return this.IsNull(this.tableFlight.ArrivalTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArrivalTimeNull() {
                this[this.tableFlight.ArrivalTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstFreeNull() {
                return this.IsNull(this.tableFlight.FirstFreeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstFreeNull() {
                this[this.tableFlight.FirstFreeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBusinessFreeNull() {
                return this.IsNull(this.tableFlight.BusinessFreeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBusinessFreeNull() {
                this[this.tableFlight.BusinessFreeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEconomyFreeNull() {
                return this.IsNull(this.tableFlight.EconomyFreeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEconomyFreeNull() {
                this[this.tableFlight.EconomyFreeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PackageRowChangeEvent : global::System.EventArgs {
            
            private PackageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageRowChangeEvent(PackageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EventRowChangeEvent : global::System.EventArgs {
            
            private EventRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRowChangeEvent(EventRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FlightRowChangeEvent : global::System.EventArgs {
            
            private FlightRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRowChangeEvent(FlightRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
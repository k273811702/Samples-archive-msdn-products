//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Microsoft.SAPSK.ContosoTours.Schema {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Sales")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Sales : global::System.Data.DataSet {
        
        private EventDataTable tableEvent;
        
        private PackageDataTable tablePackage;
        
        private PackageSaleDataTable tablePackageSale;
        
        private EventSaleDataTable tableEventSale;
        
        private FlightDataTable tableFlight;
        
        private global::System.Data.DataRelation relationEvent_Flight;
        
        private global::System.Data.DataRelation relationPackageSale_EventSale;
        
        private global::System.Data.DataRelation relationPackage_PackageSale;
        
        private global::System.Data.DataRelation relationEvent_EventSale;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sales() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Sales(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Event"] != null)) {
                    base.Tables.Add(new EventDataTable(ds.Tables["Event"]));
                }
                if ((ds.Tables["Package"] != null)) {
                    base.Tables.Add(new PackageDataTable(ds.Tables["Package"]));
                }
                if ((ds.Tables["PackageSale"] != null)) {
                    base.Tables.Add(new PackageSaleDataTable(ds.Tables["PackageSale"]));
                }
                if ((ds.Tables["EventSale"] != null)) {
                    base.Tables.Add(new EventSaleDataTable(ds.Tables["EventSale"]));
                }
                if ((ds.Tables["Flight"] != null)) {
                    base.Tables.Add(new FlightDataTable(ds.Tables["Flight"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EventDataTable Event {
            get {
                return this.tableEvent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PackageDataTable Package {
            get {
                return this.tablePackage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PackageSaleDataTable PackageSale {
            get {
                return this.tablePackageSale;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EventSaleDataTable EventSale {
            get {
                return this.tableEventSale;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FlightDataTable Flight {
            get {
                return this.tableFlight;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Sales cln = ((Sales)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Event"] != null)) {
                    base.Tables.Add(new EventDataTable(ds.Tables["Event"]));
                }
                if ((ds.Tables["Package"] != null)) {
                    base.Tables.Add(new PackageDataTable(ds.Tables["Package"]));
                }
                if ((ds.Tables["PackageSale"] != null)) {
                    base.Tables.Add(new PackageSaleDataTable(ds.Tables["PackageSale"]));
                }
                if ((ds.Tables["EventSale"] != null)) {
                    base.Tables.Add(new EventSaleDataTable(ds.Tables["EventSale"]));
                }
                if ((ds.Tables["Flight"] != null)) {
                    base.Tables.Add(new FlightDataTable(ds.Tables["Flight"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEvent = ((EventDataTable)(base.Tables["Event"]));
            if ((initTable == true)) {
                if ((this.tableEvent != null)) {
                    this.tableEvent.InitVars();
                }
            }
            this.tablePackage = ((PackageDataTable)(base.Tables["Package"]));
            if ((initTable == true)) {
                if ((this.tablePackage != null)) {
                    this.tablePackage.InitVars();
                }
            }
            this.tablePackageSale = ((PackageSaleDataTable)(base.Tables["PackageSale"]));
            if ((initTable == true)) {
                if ((this.tablePackageSale != null)) {
                    this.tablePackageSale.InitVars();
                }
            }
            this.tableEventSale = ((EventSaleDataTable)(base.Tables["EventSale"]));
            if ((initTable == true)) {
                if ((this.tableEventSale != null)) {
                    this.tableEventSale.InitVars();
                }
            }
            this.tableFlight = ((FlightDataTable)(base.Tables["Flight"]));
            if ((initTable == true)) {
                if ((this.tableFlight != null)) {
                    this.tableFlight.InitVars();
                }
            }
            this.relationEvent_Flight = this.Relations["Event_Flight"];
            this.relationPackageSale_EventSale = this.Relations["PackageSale_EventSale"];
            this.relationPackage_PackageSale = this.Relations["Package_PackageSale"];
            this.relationEvent_EventSale = this.Relations["Event_EventSale"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Sales";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Sales.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEvent = new EventDataTable();
            base.Tables.Add(this.tableEvent);
            this.tablePackage = new PackageDataTable();
            base.Tables.Add(this.tablePackage);
            this.tablePackageSale = new PackageSaleDataTable();
            base.Tables.Add(this.tablePackageSale);
            this.tableEventSale = new EventSaleDataTable();
            base.Tables.Add(this.tableEventSale);
            this.tableFlight = new FlightDataTable();
            base.Tables.Add(this.tableFlight);
            this.relationEvent_Flight = new global::System.Data.DataRelation("Event_Flight", new global::System.Data.DataColumn[] {
                        this.tableEventSale.TripNumberColumn}, new global::System.Data.DataColumn[] {
                        this.tableFlight.TripNumberColumn}, false);
            this.relationEvent_Flight.Nested = true;
            this.Relations.Add(this.relationEvent_Flight);
            this.relationPackageSale_EventSale = new global::System.Data.DataRelation("PackageSale_EventSale", new global::System.Data.DataColumn[] {
                        this.tablePackageSale.PackageIDColumn,
                        this.tablePackageSale.EventAttendeeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEventSale.PackageIDColumn,
                        this.tableEventSale.EventAttendeeIDColumn}, false);
            this.relationPackageSale_EventSale.Nested = true;
            this.Relations.Add(this.relationPackageSale_EventSale);
            this.relationPackage_PackageSale = new global::System.Data.DataRelation("Package_PackageSale", new global::System.Data.DataColumn[] {
                        this.tablePackage.PackageIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePackageSale.PackageIDColumn}, false);
            this.relationPackage_PackageSale.Nested = true;
            this.Relations.Add(this.relationPackage_PackageSale);
            this.relationEvent_EventSale = new global::System.Data.DataRelation("Event_EventSale", new global::System.Data.DataColumn[] {
                        this.tableEvent.EventIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEventSale.EventIDColumn}, false);
            this.Relations.Add(this.relationEvent_EventSale);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEvent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePackage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePackageSale() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEventSale() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFlight() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Sales ds = new Sales();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void EventRowChangeEventHandler(object sender, EventRowChangeEvent e);
        
        public delegate void PackageRowChangeEventHandler(object sender, PackageRowChangeEvent e);
        
        public delegate void PackageSaleRowChangeEventHandler(object sender, PackageSaleRowChangeEvent e);
        
        public delegate void EventSaleRowChangeEventHandler(object sender, EventSaleRowChangeEvent e);
        
        public delegate void FlightRowChangeEventHandler(object sender, FlightRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EventDataTable : global::System.Data.TypedTableBase<EventRow> {
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnEventName;
            
            private global::System.Data.DataColumn columnGoldPackagePrice;
            
            private global::System.Data.DataColumn columnSilverPackagePrice;
            
            private global::System.Data.DataColumn columnBronzePackagePrice;
            
            private global::System.Data.DataColumn columnGoldPackageCost;
            
            private global::System.Data.DataColumn columnSilverPackageCost;
            
            private global::System.Data.DataColumn columnBronzePackageCost;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventDataTable() {
                this.TableName = "Event";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EventDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventNameColumn {
                get {
                    return this.columnEventName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoldPackagePriceColumn {
                get {
                    return this.columnGoldPackagePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SilverPackagePriceColumn {
                get {
                    return this.columnSilverPackagePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BronzePackagePriceColumn {
                get {
                    return this.columnBronzePackagePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoldPackageCostColumn {
                get {
                    return this.columnGoldPackageCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SilverPackageCostColumn {
                get {
                    return this.columnSilverPackageCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BronzePackageCostColumn {
                get {
                    return this.columnBronzePackageCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow this[int index] {
                get {
                    return ((EventRow)(this.Rows[index]));
                }
            }
            
            public event EventRowChangeEventHandler EventRowChanging;
            
            public event EventRowChangeEventHandler EventRowChanged;
            
            public event EventRowChangeEventHandler EventRowDeleting;
            
            public event EventRowChangeEventHandler EventRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEventRow(EventRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow AddEventRow(int EventID, string EventName, decimal GoldPackagePrice, decimal SilverPackagePrice, decimal BronzePackagePrice, decimal GoldPackageCost, decimal SilverPackageCost, decimal BronzePackageCost) {
                EventRow rowEventRow = ((EventRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EventID,
                        EventName,
                        GoldPackagePrice,
                        SilverPackagePrice,
                        BronzePackagePrice,
                        GoldPackageCost,
                        SilverPackageCost,
                        BronzePackageCost};
                rowEventRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventRow);
                return rowEventRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow FindByEventID(int EventID) {
                return ((EventRow)(this.Rows.Find(new object[] {
                            EventID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EventDataTable cln = ((EventDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EventDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEventID = base.Columns["EventID"];
                this.columnEventName = base.Columns["EventName"];
                this.columnGoldPackagePrice = base.Columns["GoldPackagePrice"];
                this.columnSilverPackagePrice = base.Columns["SilverPackagePrice"];
                this.columnBronzePackagePrice = base.Columns["BronzePackagePrice"];
                this.columnGoldPackageCost = base.Columns["GoldPackageCost"];
                this.columnSilverPackageCost = base.Columns["SilverPackageCost"];
                this.columnBronzePackageCost = base.Columns["BronzePackageCost"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnEventName = new global::System.Data.DataColumn("EventName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventName);
                this.columnGoldPackagePrice = new global::System.Data.DataColumn("GoldPackagePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoldPackagePrice);
                this.columnSilverPackagePrice = new global::System.Data.DataColumn("SilverPackagePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSilverPackagePrice);
                this.columnBronzePackagePrice = new global::System.Data.DataColumn("BronzePackagePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBronzePackagePrice);
                this.columnGoldPackageCost = new global::System.Data.DataColumn("GoldPackageCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoldPackageCost);
                this.columnSilverPackageCost = new global::System.Data.DataColumn("SilverPackageCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSilverPackageCost);
                this.columnBronzePackageCost = new global::System.Data.DataColumn("BronzePackageCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBronzePackageCost);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEventID}, true));
                this.columnEventID.AllowDBNull = false;
                this.columnEventID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow NewEventRow() {
                return ((EventRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EventRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EventRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventRowChanged != null)) {
                    this.EventRowChanged(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventRowChanging != null)) {
                    this.EventRowChanging(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventRowDeleted != null)) {
                    this.EventRowDeleted(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventRowDeleting != null)) {
                    this.EventRowDeleting(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEventRow(EventRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Sales ds = new Sales();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EventDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PackageDataTable : global::System.Data.TypedTableBase<PackageRow> {
            
            private global::System.Data.DataColumn columnPackageID;
            
            private global::System.Data.DataColumn columnPackageName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageDataTable() {
                this.TableName = "Package";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PackageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PackageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PackageIDColumn {
                get {
                    return this.columnPackageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PackageNameColumn {
                get {
                    return this.columnPackageName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageRow this[int index] {
                get {
                    return ((PackageRow)(this.Rows[index]));
                }
            }
            
            public event PackageRowChangeEventHandler PackageRowChanging;
            
            public event PackageRowChangeEventHandler PackageRowChanged;
            
            public event PackageRowChangeEventHandler PackageRowDeleting;
            
            public event PackageRowChangeEventHandler PackageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPackageRow(PackageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageRow AddPackageRow(int PackageID, string PackageName) {
                PackageRow rowPackageRow = ((PackageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PackageID,
                        PackageName};
                rowPackageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPackageRow);
                return rowPackageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageRow FindByPackageID(int PackageID) {
                return ((PackageRow)(this.Rows.Find(new object[] {
                            PackageID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PackageDataTable cln = ((PackageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PackageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPackageID = base.Columns["PackageID"];
                this.columnPackageName = base.Columns["PackageName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPackageID = new global::System.Data.DataColumn("PackageID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageID);
                this.columnPackageName = new global::System.Data.DataColumn("PackageName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPackageID}, true));
                this.columnPackageID.AllowDBNull = false;
                this.columnPackageID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageRow NewPackageRow() {
                return ((PackageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PackageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PackageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PackageRowChanged != null)) {
                    this.PackageRowChanged(this, new PackageRowChangeEvent(((PackageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PackageRowChanging != null)) {
                    this.PackageRowChanging(this, new PackageRowChangeEvent(((PackageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PackageRowDeleted != null)) {
                    this.PackageRowDeleted(this, new PackageRowChangeEvent(((PackageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PackageRowDeleting != null)) {
                    this.PackageRowDeleting(this, new PackageRowChangeEvent(((PackageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePackageRow(PackageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Sales ds = new Sales();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PackageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PackageSaleDataTable : global::System.Data.TypedTableBase<PackageSaleRow> {
            
            private global::System.Data.DataColumn columnPackageID;
            
            private global::System.Data.DataColumn columnEventAttendeeID;
            
            private global::System.Data.DataColumn columnDatePurchased;
            
            private global::System.Data.DataColumn columnAttendeeBirthDate;
            
            private global::System.Data.DataColumn columnCustomerNumber;
            
            private global::System.Data.DataColumn columnCost;
            
            private global::System.Data.DataColumn columnPrice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageSaleDataTable() {
                this.TableName = "PackageSale";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PackageSaleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PackageSaleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PackageIDColumn {
                get {
                    return this.columnPackageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventAttendeeIDColumn {
                get {
                    return this.columnEventAttendeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DatePurchasedColumn {
                get {
                    return this.columnDatePurchased;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttendeeBirthDateColumn {
                get {
                    return this.columnAttendeeBirthDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNumberColumn {
                get {
                    return this.columnCustomerNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageSaleRow this[int index] {
                get {
                    return ((PackageSaleRow)(this.Rows[index]));
                }
            }
            
            public event PackageSaleRowChangeEventHandler PackageSaleRowChanging;
            
            public event PackageSaleRowChangeEventHandler PackageSaleRowChanged;
            
            public event PackageSaleRowChangeEventHandler PackageSaleRowDeleting;
            
            public event PackageSaleRowChangeEventHandler PackageSaleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPackageSaleRow(PackageSaleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageSaleRow AddPackageSaleRow(PackageRow parentPackageRowByPackage_PackageSale, int EventAttendeeID, System.DateTime DatePurchased, System.DateTime AttendeeBirthDate, string CustomerNumber, decimal Cost, decimal Price) {
                PackageSaleRow rowPackageSaleRow = ((PackageSaleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        EventAttendeeID,
                        DatePurchased,
                        AttendeeBirthDate,
                        CustomerNumber,
                        Cost,
                        Price};
                if ((parentPackageRowByPackage_PackageSale != null)) {
                    columnValuesArray[0] = parentPackageRowByPackage_PackageSale[0];
                }
                rowPackageSaleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPackageSaleRow);
                return rowPackageSaleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageSaleRow FindByPackageIDEventAttendeeID(int PackageID, int EventAttendeeID) {
                return ((PackageSaleRow)(this.Rows.Find(new object[] {
                            PackageID,
                            EventAttendeeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PackageSaleDataTable cln = ((PackageSaleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PackageSaleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPackageID = base.Columns["PackageID"];
                this.columnEventAttendeeID = base.Columns["EventAttendeeID"];
                this.columnDatePurchased = base.Columns["DatePurchased"];
                this.columnAttendeeBirthDate = base.Columns["AttendeeBirthDate"];
                this.columnCustomerNumber = base.Columns["CustomerNumber"];
                this.columnCost = base.Columns["Cost"];
                this.columnPrice = base.Columns["Price"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPackageID = new global::System.Data.DataColumn("PackageID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageID);
                this.columnEventAttendeeID = new global::System.Data.DataColumn("EventAttendeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventAttendeeID);
                this.columnDatePurchased = new global::System.Data.DataColumn("DatePurchased", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatePurchased);
                this.columnAttendeeBirthDate = new global::System.Data.DataColumn("AttendeeBirthDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttendeeBirthDate);
                this.columnCustomerNumber = new global::System.Data.DataColumn("CustomerNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerNumber);
                this.columnCost = new global::System.Data.DataColumn("Cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnPrice = new global::System.Data.DataColumn("Price", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPackageID,
                                this.columnEventAttendeeID}, true));
                this.columnPackageID.AllowDBNull = false;
                this.columnEventAttendeeID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageSaleRow NewPackageSaleRow() {
                return ((PackageSaleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PackageSaleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PackageSaleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PackageSaleRowChanged != null)) {
                    this.PackageSaleRowChanged(this, new PackageSaleRowChangeEvent(((PackageSaleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PackageSaleRowChanging != null)) {
                    this.PackageSaleRowChanging(this, new PackageSaleRowChangeEvent(((PackageSaleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PackageSaleRowDeleted != null)) {
                    this.PackageSaleRowDeleted(this, new PackageSaleRowChangeEvent(((PackageSaleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PackageSaleRowDeleting != null)) {
                    this.PackageSaleRowDeleting(this, new PackageSaleRowChangeEvent(((PackageSaleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePackageSaleRow(PackageSaleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Sales ds = new Sales();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PackageSaleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EventSaleDataTable : global::System.Data.TypedTableBase<EventSaleRow> {
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnPackageID;
            
            private global::System.Data.DataColumn columnEventAttendeeID;
            
            private global::System.Data.DataColumn columnAgencyNumber;
            
            private global::System.Data.DataColumn columnTripNumber;
            
            private global::System.Data.DataColumn columnPackageType;
            
            private global::System.Data.DataColumn columnCost;
            
            private global::System.Data.DataColumn columnPrice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventSaleDataTable() {
                this.TableName = "EventSale";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventSaleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EventSaleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PackageIDColumn {
                get {
                    return this.columnPackageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventAttendeeIDColumn {
                get {
                    return this.columnEventAttendeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyNumberColumn {
                get {
                    return this.columnAgencyNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripNumberColumn {
                get {
                    return this.columnTripNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PackageTypeColumn {
                get {
                    return this.columnPackageType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventSaleRow this[int index] {
                get {
                    return ((EventSaleRow)(this.Rows[index]));
                }
            }
            
            public event EventSaleRowChangeEventHandler EventSaleRowChanging;
            
            public event EventSaleRowChangeEventHandler EventSaleRowChanged;
            
            public event EventSaleRowChangeEventHandler EventSaleRowDeleting;
            
            public event EventSaleRowChangeEventHandler EventSaleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEventSaleRow(EventSaleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventSaleRow AddEventSaleRow(EventRow parentEventRowByEvent_EventSale, int PackageID, int EventAttendeeID, string AgencyNumber, string TripNumber, string PackageType, decimal Cost, decimal Price) {
                EventSaleRow rowEventSaleRow = ((EventSaleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PackageID,
                        EventAttendeeID,
                        AgencyNumber,
                        TripNumber,
                        PackageType,
                        Cost,
                        Price};
                if ((parentEventRowByEvent_EventSale != null)) {
                    columnValuesArray[0] = parentEventRowByEvent_EventSale[0];
                }
                rowEventSaleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventSaleRow);
                return rowEventSaleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventSaleRow FindByEventIDPackageIDEventAttendeeIDTripNumber(int EventID, int PackageID, int EventAttendeeID, string TripNumber) {
                return ((EventSaleRow)(this.Rows.Find(new object[] {
                            EventID,
                            PackageID,
                            EventAttendeeID,
                            TripNumber})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EventSaleDataTable cln = ((EventSaleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EventSaleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEventID = base.Columns["EventID"];
                this.columnPackageID = base.Columns["PackageID"];
                this.columnEventAttendeeID = base.Columns["EventAttendeeID"];
                this.columnAgencyNumber = base.Columns["AgencyNumber"];
                this.columnTripNumber = base.Columns["TripNumber"];
                this.columnPackageType = base.Columns["PackageType"];
                this.columnCost = base.Columns["Cost"];
                this.columnPrice = base.Columns["Price"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnPackageID = new global::System.Data.DataColumn("PackageID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageID);
                this.columnEventAttendeeID = new global::System.Data.DataColumn("EventAttendeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventAttendeeID);
                this.columnAgencyNumber = new global::System.Data.DataColumn("AgencyNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgencyNumber);
                this.columnTripNumber = new global::System.Data.DataColumn("TripNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTripNumber);
                this.columnPackageType = new global::System.Data.DataColumn("PackageType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageType);
                this.columnCost = new global::System.Data.DataColumn("Cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnPrice = new global::System.Data.DataColumn("Price", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEventID,
                                this.columnPackageID,
                                this.columnEventAttendeeID,
                                this.columnTripNumber}, true));
                this.columnEventID.AllowDBNull = false;
                this.columnPackageID.AllowDBNull = false;
                this.columnEventAttendeeID.AllowDBNull = false;
                this.columnTripNumber.AllowDBNull = false;
                this.Namespace = "http://tempuri.org/Sales.xsd";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventSaleRow NewEventSaleRow() {
                return ((EventSaleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EventSaleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EventSaleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventSaleRowChanged != null)) {
                    this.EventSaleRowChanged(this, new EventSaleRowChangeEvent(((EventSaleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventSaleRowChanging != null)) {
                    this.EventSaleRowChanging(this, new EventSaleRowChangeEvent(((EventSaleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventSaleRowDeleted != null)) {
                    this.EventSaleRowDeleted(this, new EventSaleRowChangeEvent(((EventSaleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventSaleRowDeleting != null)) {
                    this.EventSaleRowDeleting(this, new EventSaleRowChangeEvent(((EventSaleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEventSaleRow(EventSaleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Sales ds = new Sales();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EventSaleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FlightDataTable : global::System.Data.TypedTableBase<FlightRow> {
            
            private global::System.Data.DataColumn columnTripNumber;
            
            private global::System.Data.DataColumn columnFlightConnection;
            
            private global::System.Data.DataColumn columnFlightDate;
            
            private global::System.Data.DataColumn columnClass;
            
            private global::System.Data.DataColumn columnTicketPrice;
            
            private global::System.Data.DataColumn columnNumAdult;
            
            private global::System.Data.DataColumn columnNumChild;
            
            private global::System.Data.DataColumn columnNumInfant;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightDataTable() {
                this.TableName = "Flight";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlightDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FlightDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripNumberColumn {
                get {
                    return this.columnTripNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlightConnectionColumn {
                get {
                    return this.columnFlightConnection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlightDateColumn {
                get {
                    return this.columnFlightDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassColumn {
                get {
                    return this.columnClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TicketPriceColumn {
                get {
                    return this.columnTicketPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumAdultColumn {
                get {
                    return this.columnNumAdult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumChildColumn {
                get {
                    return this.columnNumChild;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumInfantColumn {
                get {
                    return this.columnNumInfant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow this[int index] {
                get {
                    return ((FlightRow)(this.Rows[index]));
                }
            }
            
            public event FlightRowChangeEventHandler FlightRowChanging;
            
            public event FlightRowChangeEventHandler FlightRowChanged;
            
            public event FlightRowChangeEventHandler FlightRowDeleting;
            
            public event FlightRowChangeEventHandler FlightRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFlightRow(FlightRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow AddFlightRow(EventSaleRow parentEventSaleRowByEvent_Flight, string FlightConnection, string FlightDate, string Class, decimal TicketPrice, int NumAdult, int NumChild, int NumInfant) {
                FlightRow rowFlightRow = ((FlightRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FlightConnection,
                        FlightDate,
                        Class,
                        TicketPrice,
                        NumAdult,
                        NumChild,
                        NumInfant};
                if ((parentEventSaleRowByEvent_Flight != null)) {
                    columnValuesArray[0] = parentEventSaleRowByEvent_Flight[4];
                }
                rowFlightRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFlightRow);
                return rowFlightRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow FindByTripNumber(string TripNumber) {
                return ((FlightRow)(this.Rows.Find(new object[] {
                            TripNumber})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FlightDataTable cln = ((FlightDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FlightDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTripNumber = base.Columns["TripNumber"];
                this.columnFlightConnection = base.Columns["FlightConnection"];
                this.columnFlightDate = base.Columns["FlightDate"];
                this.columnClass = base.Columns["Class"];
                this.columnTicketPrice = base.Columns["TicketPrice"];
                this.columnNumAdult = base.Columns["NumAdult"];
                this.columnNumChild = base.Columns["NumChild"];
                this.columnNumInfant = base.Columns["NumInfant"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTripNumber = new global::System.Data.DataColumn("TripNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTripNumber);
                this.columnFlightConnection = new global::System.Data.DataColumn("FlightConnection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlightConnection);
                this.columnFlightDate = new global::System.Data.DataColumn("FlightDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlightDate);
                this.columnClass = new global::System.Data.DataColumn("Class", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClass);
                this.columnTicketPrice = new global::System.Data.DataColumn("TicketPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicketPrice);
                this.columnNumAdult = new global::System.Data.DataColumn("NumAdult", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumAdult);
                this.columnNumChild = new global::System.Data.DataColumn("NumChild", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumChild);
                this.columnNumInfant = new global::System.Data.DataColumn("NumInfant", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumInfant);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTripNumber}, true));
                this.columnTripNumber.AllowDBNull = false;
                this.columnTripNumber.Unique = true;
                this.Namespace = "http://tempuri.org/Sales.xsd";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow NewFlightRow() {
                return ((FlightRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FlightRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FlightRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FlightRowChanged != null)) {
                    this.FlightRowChanged(this, new FlightRowChangeEvent(((FlightRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FlightRowChanging != null)) {
                    this.FlightRowChanging(this, new FlightRowChangeEvent(((FlightRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FlightRowDeleted != null)) {
                    this.FlightRowDeleted(this, new FlightRowChangeEvent(((FlightRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FlightRowDeleting != null)) {
                    this.FlightRowDeleting(this, new FlightRowChangeEvent(((FlightRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFlightRow(FlightRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Sales ds = new Sales();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FlightDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EventRow : global::System.Data.DataRow {
            
            private EventDataTable tableEvent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEvent = ((EventDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    return ((int)(this[this.tableEvent.EventIDColumn]));
                }
                set {
                    this[this.tableEvent.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventName {
                get {
                    try {
                        return ((string)(this[this.tableEvent.EventNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventName\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.EventNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GoldPackagePrice {
                get {
                    try {
                        return ((decimal)(this[this.tableEvent.GoldPackagePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GoldPackagePrice\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.GoldPackagePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SilverPackagePrice {
                get {
                    try {
                        return ((decimal)(this[this.tableEvent.SilverPackagePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SilverPackagePrice\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.SilverPackagePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BronzePackagePrice {
                get {
                    try {
                        return ((decimal)(this[this.tableEvent.BronzePackagePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BronzePackagePrice\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.BronzePackagePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GoldPackageCost {
                get {
                    try {
                        return ((decimal)(this[this.tableEvent.GoldPackageCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GoldPackageCost\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.GoldPackageCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SilverPackageCost {
                get {
                    try {
                        return ((decimal)(this[this.tableEvent.SilverPackageCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SilverPackageCost\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.SilverPackageCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BronzePackageCost {
                get {
                    try {
                        return ((decimal)(this[this.tableEvent.BronzePackageCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BronzePackageCost\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.BronzePackageCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventNameNull() {
                return this.IsNull(this.tableEvent.EventNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventNameNull() {
                this[this.tableEvent.EventNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoldPackagePriceNull() {
                return this.IsNull(this.tableEvent.GoldPackagePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoldPackagePriceNull() {
                this[this.tableEvent.GoldPackagePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSilverPackagePriceNull() {
                return this.IsNull(this.tableEvent.SilverPackagePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSilverPackagePriceNull() {
                this[this.tableEvent.SilverPackagePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBronzePackagePriceNull() {
                return this.IsNull(this.tableEvent.BronzePackagePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBronzePackagePriceNull() {
                this[this.tableEvent.BronzePackagePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoldPackageCostNull() {
                return this.IsNull(this.tableEvent.GoldPackageCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoldPackageCostNull() {
                this[this.tableEvent.GoldPackageCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSilverPackageCostNull() {
                return this.IsNull(this.tableEvent.SilverPackageCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSilverPackageCostNull() {
                this[this.tableEvent.SilverPackageCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBronzePackageCostNull() {
                return this.IsNull(this.tableEvent.BronzePackageCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBronzePackageCostNull() {
                this[this.tableEvent.BronzePackageCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventSaleRow[] GetEventSaleRows() {
                if ((this.Table.ChildRelations["Event_EventSale"] == null)) {
                    return new EventSaleRow[0];
                }
                else {
                    return ((EventSaleRow[])(base.GetChildRows(this.Table.ChildRelations["Event_EventSale"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PackageRow : global::System.Data.DataRow {
            
            private PackageDataTable tablePackage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PackageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePackage = ((PackageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PackageID {
                get {
                    return ((int)(this[this.tablePackage.PackageIDColumn]));
                }
                set {
                    this[this.tablePackage.PackageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackageName {
                get {
                    try {
                        return ((string)(this[this.tablePackage.PackageNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PackageName\' in table \'Package\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePackage.PackageNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPackageNameNull() {
                return this.IsNull(this.tablePackage.PackageNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPackageNameNull() {
                this[this.tablePackage.PackageNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageSaleRow[] GetPackageSaleRows() {
                if ((this.Table.ChildRelations["Package_PackageSale"] == null)) {
                    return new PackageSaleRow[0];
                }
                else {
                    return ((PackageSaleRow[])(base.GetChildRows(this.Table.ChildRelations["Package_PackageSale"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PackageSaleRow : global::System.Data.DataRow {
            
            private PackageSaleDataTable tablePackageSale;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PackageSaleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePackageSale = ((PackageSaleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PackageID {
                get {
                    return ((int)(this[this.tablePackageSale.PackageIDColumn]));
                }
                set {
                    this[this.tablePackageSale.PackageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventAttendeeID {
                get {
                    return ((int)(this[this.tablePackageSale.EventAttendeeIDColumn]));
                }
                set {
                    this[this.tablePackageSale.EventAttendeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DatePurchased {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePackageSale.DatePurchasedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DatePurchased\' in table \'PackageSale\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePackageSale.DatePurchasedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AttendeeBirthDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePackageSale.AttendeeBirthDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AttendeeBirthDate\' in table \'PackageSale\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePackageSale.AttendeeBirthDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerNumber {
                get {
                    try {
                        return ((string)(this[this.tablePackageSale.CustomerNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerNumber\' in table \'PackageSale\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePackageSale.CustomerNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Cost {
                get {
                    try {
                        return ((decimal)(this[this.tablePackageSale.CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cost\' in table \'PackageSale\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePackageSale.CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Price {
                get {
                    try {
                        return ((decimal)(this[this.tablePackageSale.PriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Price\' in table \'PackageSale\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePackageSale.PriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageRow PackageRow {
                get {
                    return ((PackageRow)(this.GetParentRow(this.Table.ParentRelations["Package_PackageSale"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Package_PackageSale"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDatePurchasedNull() {
                return this.IsNull(this.tablePackageSale.DatePurchasedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDatePurchasedNull() {
                this[this.tablePackageSale.DatePurchasedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttendeeBirthDateNull() {
                return this.IsNull(this.tablePackageSale.AttendeeBirthDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttendeeBirthDateNull() {
                this[this.tablePackageSale.AttendeeBirthDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNumberNull() {
                return this.IsNull(this.tablePackageSale.CustomerNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNumberNull() {
                this[this.tablePackageSale.CustomerNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tablePackageSale.CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tablePackageSale.CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceNull() {
                return this.IsNull(this.tablePackageSale.PriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceNull() {
                this[this.tablePackageSale.PriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventSaleRow[] GetEventSaleRows() {
                if ((this.Table.ChildRelations["PackageSale_EventSale"] == null)) {
                    return new EventSaleRow[0];
                }
                else {
                    return ((EventSaleRow[])(base.GetChildRows(this.Table.ChildRelations["PackageSale_EventSale"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EventSaleRow : global::System.Data.DataRow {
            
            private EventSaleDataTable tableEventSale;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventSaleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEventSale = ((EventSaleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    return ((int)(this[this.tableEventSale.EventIDColumn]));
                }
                set {
                    this[this.tableEventSale.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PackageID {
                get {
                    return ((int)(this[this.tableEventSale.PackageIDColumn]));
                }
                set {
                    this[this.tableEventSale.PackageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventAttendeeID {
                get {
                    return ((int)(this[this.tableEventSale.EventAttendeeIDColumn]));
                }
                set {
                    this[this.tableEventSale.EventAttendeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgencyNumber {
                get {
                    try {
                        return ((string)(this[this.tableEventSale.AgencyNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgencyNumber\' in table \'EventSale\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventSale.AgencyNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TripNumber {
                get {
                    return ((string)(this[this.tableEventSale.TripNumberColumn]));
                }
                set {
                    this[this.tableEventSale.TripNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackageType {
                get {
                    try {
                        return ((string)(this[this.tableEventSale.PackageTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PackageType\' in table \'EventSale\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventSale.PackageTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Cost {
                get {
                    try {
                        return ((decimal)(this[this.tableEventSale.CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cost\' in table \'EventSale\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventSale.CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Price {
                get {
                    try {
                        return ((decimal)(this[this.tableEventSale.PriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Price\' in table \'EventSale\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventSale.PriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageSaleRow PackageSaleRowParent {
                get {
                    return ((PackageSaleRow)(this.GetParentRow(this.Table.ParentRelations["PackageSale_EventSale"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PackageSale_EventSale"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow EventRow {
                get {
                    return ((EventRow)(this.GetParentRow(this.Table.ParentRelations["Event_EventSale"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Event_EventSale"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyNumberNull() {
                return this.IsNull(this.tableEventSale.AgencyNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyNumberNull() {
                this[this.tableEventSale.AgencyNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPackageTypeNull() {
                return this.IsNull(this.tableEventSale.PackageTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPackageTypeNull() {
                this[this.tableEventSale.PackageTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tableEventSale.CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tableEventSale.CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceNull() {
                return this.IsNull(this.tableEventSale.PriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceNull() {
                this[this.tableEventSale.PriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow[] GetFlightRows() {
                if ((this.Table.ChildRelations["Event_Flight"] == null)) {
                    return new FlightRow[0];
                }
                else {
                    return ((FlightRow[])(base.GetChildRows(this.Table.ChildRelations["Event_Flight"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FlightRow : global::System.Data.DataRow {
            
            private FlightDataTable tableFlight;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlightRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFlight = ((FlightDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TripNumber {
                get {
                    return ((string)(this[this.tableFlight.TripNumberColumn]));
                }
                set {
                    this[this.tableFlight.TripNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlightConnection {
                get {
                    try {
                        return ((string)(this[this.tableFlight.FlightConnectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlightConnection\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.FlightConnectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlightDate {
                get {
                    try {
                        return ((string)(this[this.tableFlight.FlightDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlightDate\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.FlightDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Class {
                get {
                    try {
                        return ((string)(this[this.tableFlight.ClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Class\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.ClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TicketPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableFlight.TicketPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TicketPrice\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.TicketPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumAdult {
                get {
                    try {
                        return ((int)(this[this.tableFlight.NumAdultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumAdult\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.NumAdultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumChild {
                get {
                    try {
                        return ((int)(this[this.tableFlight.NumChildColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumChild\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.NumChildColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumInfant {
                get {
                    try {
                        return ((int)(this[this.tableFlight.NumInfantColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumInfant\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.NumInfantColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventSaleRow EventRow {
                get {
                    return ((EventSaleRow)(this.GetParentRow(this.Table.ParentRelations["Event_Flight"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Event_Flight"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlightConnectionNull() {
                return this.IsNull(this.tableFlight.FlightConnectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlightConnectionNull() {
                this[this.tableFlight.FlightConnectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlightDateNull() {
                return this.IsNull(this.tableFlight.FlightDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlightDateNull() {
                this[this.tableFlight.FlightDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassNull() {
                return this.IsNull(this.tableFlight.ClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassNull() {
                this[this.tableFlight.ClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTicketPriceNull() {
                return this.IsNull(this.tableFlight.TicketPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTicketPriceNull() {
                this[this.tableFlight.TicketPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumAdultNull() {
                return this.IsNull(this.tableFlight.NumAdultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumAdultNull() {
                this[this.tableFlight.NumAdultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumChildNull() {
                return this.IsNull(this.tableFlight.NumChildColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumChildNull() {
                this[this.tableFlight.NumChildColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumInfantNull() {
                return this.IsNull(this.tableFlight.NumInfantColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumInfantNull() {
                this[this.tableFlight.NumInfantColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EventRowChangeEvent : global::System.EventArgs {
            
            private EventRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRowChangeEvent(EventRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PackageRowChangeEvent : global::System.EventArgs {
            
            private PackageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageRowChangeEvent(PackageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PackageSaleRowChangeEvent : global::System.EventArgs {
            
            private PackageSaleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageSaleRowChangeEvent(PackageSaleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackageSaleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EventSaleRowChangeEvent : global::System.EventArgs {
            
            private EventSaleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventSaleRowChangeEvent(EventSaleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventSaleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FlightRowChangeEvent : global::System.EventArgs {
            
            private FlightRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRowChangeEvent(FlightRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Microsoft.SAPSK.ContosoTours.Schema {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("Flights")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Flights : System.Data.DataSet {
        
        private FlightDataTable tableFlight;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Flights() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Flights(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Flight"] != null)) {
                    base.Tables.Add(new FlightDataTable(ds.Tables["Flight"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FlightDataTable Flight {
            get {
                return this.tableFlight;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            Flights cln = ((Flights)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Flight"] != null)) {
                    base.Tables.Add(new FlightDataTable(ds.Tables["Flight"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableFlight = ((FlightDataTable)(base.Tables["Flight"]));
            if ((initTable == true)) {
                if ((this.tableFlight != null)) {
                    this.tableFlight.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Flights";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Flights.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableFlight = new FlightDataTable();
            base.Tables.Add(this.tableFlight);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFlight() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            Flights ds = new Flights();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void FlightRowChangeEventHandler(object sender, FlightRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FlightDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCarrierName;
            
            private System.Data.DataColumn columnCityFrom;
            
            private System.Data.DataColumn columnCityTo;
            
            private System.Data.DataColumn columnAirportFrom;
            
            private System.Data.DataColumn columnAirportTo;
            
            private System.Data.DataColumn columnFlightDate;
            
            private System.Data.DataColumn columnDepartureTime;
            
            private System.Data.DataColumn columnArrivalDate;
            
            private System.Data.DataColumn columnArrivalTime;
            
            private System.Data.DataColumn columnFirstClassFree;
            
            private System.Data.DataColumn columnBusinessFree;
            
            private System.Data.DataColumn columnEconomyFree;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightDataTable() {
                this.TableName = "Flight";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlightDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FlightDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CarrierNameColumn {
                get {
                    return this.columnCarrierName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CityFromColumn {
                get {
                    return this.columnCityFrom;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CityToColumn {
                get {
                    return this.columnCityTo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AirportFromColumn {
                get {
                    return this.columnAirportFrom;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AirportToColumn {
                get {
                    return this.columnAirportTo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FlightDateColumn {
                get {
                    return this.columnFlightDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartureTimeColumn {
                get {
                    return this.columnDepartureTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArrivalDateColumn {
                get {
                    return this.columnArrivalDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArrivalTimeColumn {
                get {
                    return this.columnArrivalTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FirstClassFreeColumn {
                get {
                    return this.columnFirstClassFree;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BusinessFreeColumn {
                get {
                    return this.columnBusinessFree;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EconomyFreeColumn {
                get {
                    return this.columnEconomyFree;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow this[int index] {
                get {
                    return ((FlightRow)(this.Rows[index]));
                }
            }
            
            public event FlightRowChangeEventHandler FlightRowChanging;
            
            public event FlightRowChangeEventHandler FlightRowChanged;
            
            public event FlightRowChangeEventHandler FlightRowDeleting;
            
            public event FlightRowChangeEventHandler FlightRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFlightRow(FlightRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow AddFlightRow(string CarrierName, string CityFrom, string CityTo, string AirportFrom, string AirportTo, string FlightDate, string DepartureTime, string ArrivalDate, string ArrivalTime, int FirstClassFree, int BusinessFree, int EconomyFree) {
                FlightRow rowFlightRow = ((FlightRow)(this.NewRow()));
                rowFlightRow.ItemArray = new object[] {
                        CarrierName,
                        CityFrom,
                        CityTo,
                        AirportFrom,
                        AirportTo,
                        FlightDate,
                        DepartureTime,
                        ArrivalDate,
                        ArrivalTime,
                        FirstClassFree,
                        BusinessFree,
                        EconomyFree};
                this.Rows.Add(rowFlightRow);
                return rowFlightRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FlightDataTable cln = ((FlightDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FlightDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCarrierName = base.Columns["CarrierName"];
                this.columnCityFrom = base.Columns["CityFrom"];
                this.columnCityTo = base.Columns["CityTo"];
                this.columnAirportFrom = base.Columns["AirportFrom"];
                this.columnAirportTo = base.Columns["AirportTo"];
                this.columnFlightDate = base.Columns["FlightDate"];
                this.columnDepartureTime = base.Columns["DepartureTime"];
                this.columnArrivalDate = base.Columns["ArrivalDate"];
                this.columnArrivalTime = base.Columns["ArrivalTime"];
                this.columnFirstClassFree = base.Columns["FirstClassFree"];
                this.columnBusinessFree = base.Columns["BusinessFree"];
                this.columnEconomyFree = base.Columns["EconomyFree"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCarrierName = new System.Data.DataColumn("CarrierName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarrierName);
                this.columnCityFrom = new System.Data.DataColumn("CityFrom", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCityFrom);
                this.columnCityTo = new System.Data.DataColumn("CityTo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCityTo);
                this.columnAirportFrom = new System.Data.DataColumn("AirportFrom", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAirportFrom);
                this.columnAirportTo = new System.Data.DataColumn("AirportTo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAirportTo);
                this.columnFlightDate = new System.Data.DataColumn("FlightDate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlightDate);
                this.columnDepartureTime = new System.Data.DataColumn("DepartureTime", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartureTime);
                this.columnArrivalDate = new System.Data.DataColumn("ArrivalDate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArrivalDate);
                this.columnArrivalTime = new System.Data.DataColumn("ArrivalTime", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArrivalTime);
                this.columnFirstClassFree = new System.Data.DataColumn("FirstClassFree", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstClassFree);
                this.columnBusinessFree = new System.Data.DataColumn("BusinessFree", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusinessFree);
                this.columnEconomyFree = new System.Data.DataColumn("EconomyFree", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEconomyFree);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow NewFlightRow() {
                return ((FlightRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FlightRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FlightRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FlightRowChanged != null)) {
                    this.FlightRowChanged(this, new FlightRowChangeEvent(((FlightRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FlightRowChanging != null)) {
                    this.FlightRowChanging(this, new FlightRowChangeEvent(((FlightRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FlightRowDeleted != null)) {
                    this.FlightRowDeleted(this, new FlightRowChangeEvent(((FlightRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FlightRowDeleting != null)) {
                    this.FlightRowDeleting(this, new FlightRowChangeEvent(((FlightRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFlightRow(FlightRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Flights ds = new Flights();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FlightDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FlightRow : System.Data.DataRow {
            
            private FlightDataTable tableFlight;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlightRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFlight = ((FlightDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CarrierName {
                get {
                    try {
                        return ((string)(this[this.tableFlight.CarrierNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CarrierName\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.CarrierNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CityFrom {
                get {
                    try {
                        return ((string)(this[this.tableFlight.CityFromColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CityFrom\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.CityFromColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CityTo {
                get {
                    try {
                        return ((string)(this[this.tableFlight.CityToColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CityTo\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.CityToColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AirportFrom {
                get {
                    try {
                        return ((string)(this[this.tableFlight.AirportFromColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AirportFrom\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.AirportFromColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AirportTo {
                get {
                    try {
                        return ((string)(this[this.tableFlight.AirportToColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AirportTo\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.AirportToColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlightDate {
                get {
                    try {
                        return ((string)(this[this.tableFlight.FlightDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FlightDate\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.FlightDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartureTime {
                get {
                    try {
                        return ((string)(this[this.tableFlight.DepartureTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DepartureTime\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.DepartureTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArrivalDate {
                get {
                    try {
                        return ((string)(this[this.tableFlight.ArrivalDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ArrivalDate\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.ArrivalDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArrivalTime {
                get {
                    try {
                        return ((string)(this[this.tableFlight.ArrivalTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ArrivalTime\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.ArrivalTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FirstClassFree {
                get {
                    try {
                        return ((int)(this[this.tableFlight.FirstClassFreeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FirstClassFree\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.FirstClassFreeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BusinessFree {
                get {
                    try {
                        return ((int)(this[this.tableFlight.BusinessFreeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BusinessFree\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.BusinessFreeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EconomyFree {
                get {
                    try {
                        return ((int)(this[this.tableFlight.EconomyFreeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EconomyFree\' in table \'Flight\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlight.EconomyFreeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarrierNameNull() {
                return this.IsNull(this.tableFlight.CarrierNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarrierNameNull() {
                this[this.tableFlight.CarrierNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityFromNull() {
                return this.IsNull(this.tableFlight.CityFromColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityFromNull() {
                this[this.tableFlight.CityFromColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityToNull() {
                return this.IsNull(this.tableFlight.CityToColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityToNull() {
                this[this.tableFlight.CityToColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAirportFromNull() {
                return this.IsNull(this.tableFlight.AirportFromColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAirportFromNull() {
                this[this.tableFlight.AirportFromColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAirportToNull() {
                return this.IsNull(this.tableFlight.AirportToColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAirportToNull() {
                this[this.tableFlight.AirportToColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlightDateNull() {
                return this.IsNull(this.tableFlight.FlightDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlightDateNull() {
                this[this.tableFlight.FlightDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartureTimeNull() {
                return this.IsNull(this.tableFlight.DepartureTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartureTimeNull() {
                this[this.tableFlight.DepartureTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArrivalDateNull() {
                return this.IsNull(this.tableFlight.ArrivalDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArrivalDateNull() {
                this[this.tableFlight.ArrivalDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArrivalTimeNull() {
                return this.IsNull(this.tableFlight.ArrivalTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArrivalTimeNull() {
                this[this.tableFlight.ArrivalTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstClassFreeNull() {
                return this.IsNull(this.tableFlight.FirstClassFreeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstClassFreeNull() {
                this[this.tableFlight.FirstClassFreeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBusinessFreeNull() {
                return this.IsNull(this.tableFlight.BusinessFreeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBusinessFreeNull() {
                this[this.tableFlight.BusinessFreeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEconomyFreeNull() {
                return this.IsNull(this.tableFlight.EconomyFreeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEconomyFreeNull() {
                this[this.tableFlight.EconomyFreeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FlightRowChangeEvent : System.EventArgs {
            
            private FlightRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRowChangeEvent(FlightRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlightRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
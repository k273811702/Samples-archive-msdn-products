//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MusicBrainzSharePoint.SandboxedVisualWebPart1.vstemplate {
    using System.Web;
    using System.Text.RegularExpressions;
    using Microsoft.SharePoint.WebPartPages;
    using Microsoft.SharePoint.WebControls;
    using System.Web.Security;
    using Microsoft.SharePoint.Utilities;
    using System;
    using System.Collections;
    using System.Collections.Specialized;
    using Microsoft.SharePoint;
    using System.Web.UI;
    using System.Web.Profile;
    using System.Text;
    using System.Web.Caching;
    using System.Web.UI.WebControls;
    using System.Configuration;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.SessionState;
    using System.Web.UI.HtmlControls;
    
    
    public partial class SandboxedVisualWebPart1 {
        
        public static implicit operator global::System.Web.UI.TemplateControl(SandboxedVisualWebPart1 target) 
        {
            return target == null ? null : target.TemplateControl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        private void @__BuildControlTree(global::MusicBrainzSharePoint.SandboxedVisualWebPart1.vstemplate.SandboxedVisualWebPart1 @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n<!-- Silverlight Error Handler -->\r\n<script type=\"text/javascript\">\r\nfunction o" +
                        "nSilverlightError(sender, args) {\r\n    var appSource = \"\";\r\n    if (sender != nu" +
                        "ll && sender != 0) {\r\n        appSource = sender.getHost().Source;\r\n    }\r\n\r\n   " +
                        " var errorType = args.ErrorType;\r\n    var iErrorCode = args.ErrorCode;\r\n\r\n    if" +
                        " (errorType == \"ImageError\" || errorType == \"MediaError\") {\r\n        return;\r\n  " +
                        "  }\r\n\r\n    var errMsg = \"Unhandled Error in Silverlight Application \" + appSourc" +
                        "e + \"\\n\";\r\n\r\n    errMsg += \"Code: \" + iErrorCode + \"    \\n\";\r\n    errMsg += \"Cat" +
                        "egory: \" + errorType + \"       \\n\";\r\n    errMsg += \"Message: \" + args.ErrorMessa" +
                        "ge + \"     \\n\";\r\n\r\n    if (errorType == \"ParserError\") {\r\n        errMsg += \"Fil" +
                        "e: \" + args.xamlFile + \"     \\n\";\r\n        errMsg += \"Line: \" + args.lineNumber " +
                        "+ \"     \\n\";\r\n        errMsg += \"Position: \" + args.charPosition + \"     \\n\";\r\n " +
                        "   }\r\n    else if (errorType == \"RuntimeError\") {\r\n        if (args.lineNumber !" +
                        "= 0) {\r\n            errMsg += \"Line: \" + args.lineNumber + \"     \\n\";\r\n         " +
                        "   errMsg += \"Position: \" + args.charPosition + \"     \\n\";\r\n        }\r\n        e" +
                        "rrMsg += \"MethodName: \" + args.methodName + \"     \\n\";\r\n    }\r\n\r\n    throw new E" +
                        "rror(errMsg);\r\n}\r\n</script>\r\n\r\n<!-- Silverlight Control -->\r\n<div id=\"silverligh" +
                        "tControlHost\" style=\"position:relative; height:480px; width:640px;\">\r\n\r\n    <obj" +
                        "ect data=\"data:application/x-silverlight-2,\" type=\"application/x-silverlight-2\"\r" +
                        "\n        width=\"100%\" height=\"100%\">\r\n        <param name=\"source\" value=\"/SiteA" +
                        "ssets/MusicBrainzSilverlightApplication.xap\" />\r\n        <param name=\"onError\" v" +
                        "alue=\"onSilverlightError\" />\r\n        <param name=\"background\" value=\"white\" />\r" +
                        "\n        <param name=\"minRuntimeVersion\" value=\"4.0.50401.0\" />\r\n        <param " +
                        "name=\"autoUpgrade\" value=\"true\" />\r\n        <a href=\"http://go.microsoft.com/fwl" +
                        "ink/?LinkID=149156&v=4.0.50401.0\" style=\"text-decoration: none\">\r\n            <i" +
                        "mg src=\"http://go.microsoft.com/fwlink/?LinkId=161376\" alt=\"Get Microsoft Silver" +
                        "light\"\r\n                style=\"border-style: none\" />\r\n        </a>\r\n    </objec" +
                        "t>\r\n    <iframe id=\"_sl_historyFrame\" style=\"visibility: hidden; height: 0px; wi" +
                        "dth: 0px;border: 0px\"></iframe>\r\n</div>\r\n"));
        }
        
        private void InitializeControl() {
            this.@__BuildControlTree(this);
            this.Load += new global::System.EventHandler(this.Page_Load);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        protected virtual object Eval(string expression) {
            return global::System.Web.UI.DataBinder.Eval(this.Page.GetDataItem(), expression);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        protected virtual string Eval(string expression, string format) {
            return global::System.Web.UI.DataBinder.Eval(this.Page.GetDataItem(), expression, format);
        }
    }
}

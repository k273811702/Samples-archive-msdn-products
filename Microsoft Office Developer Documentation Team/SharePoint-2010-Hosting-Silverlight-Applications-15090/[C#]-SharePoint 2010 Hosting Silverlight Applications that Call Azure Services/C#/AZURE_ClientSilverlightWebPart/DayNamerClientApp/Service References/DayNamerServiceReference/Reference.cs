//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace DayNamerClientApp.DayNamerServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DayNamerServiceReference.IDayInfo")]
    public interface IDayInfo {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDayInfo/TodayIs", ReplyAction="http://tempuri.org/IDayInfo/TodayIsResponse")]
        System.IAsyncResult BeginTodayIs(System.AsyncCallback callback, object asyncState);
        
        string EndTodayIs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDayInfo/TodayAdd", ReplyAction="http://tempuri.org/IDayInfo/TodayAddResponse")]
        System.IAsyncResult BeginTodayAdd(int daysToAdd, System.AsyncCallback callback, object asyncState);
        
        string EndTodayAdd(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDayInfoChannel : DayNamerClientApp.DayNamerServiceReference.IDayInfo, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TodayIsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TodayIsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TodayAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TodayAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DayInfoClient : System.ServiceModel.ClientBase<DayNamerClientApp.DayNamerServiceReference.IDayInfo>, DayNamerClientApp.DayNamerServiceReference.IDayInfo {
        
        private BeginOperationDelegate onBeginTodayIsDelegate;
        
        private EndOperationDelegate onEndTodayIsDelegate;
        
        private System.Threading.SendOrPostCallback onTodayIsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTodayAddDelegate;
        
        private EndOperationDelegate onEndTodayAddDelegate;
        
        private System.Threading.SendOrPostCallback onTodayAddCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DayInfoClient() {
        }
        
        public DayInfoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DayInfoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DayInfoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DayInfoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<TodayIsCompletedEventArgs> TodayIsCompleted;
        
        public event System.EventHandler<TodayAddCompletedEventArgs> TodayAddCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DayNamerClientApp.DayNamerServiceReference.IDayInfo.BeginTodayIs(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTodayIs(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string DayNamerClientApp.DayNamerServiceReference.IDayInfo.EndTodayIs(System.IAsyncResult result) {
            return base.Channel.EndTodayIs(result);
        }
        
        private System.IAsyncResult OnBeginTodayIs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((DayNamerClientApp.DayNamerServiceReference.IDayInfo)(this)).BeginTodayIs(callback, asyncState);
        }
        
        private object[] OnEndTodayIs(System.IAsyncResult result) {
            string retVal = ((DayNamerClientApp.DayNamerServiceReference.IDayInfo)(this)).EndTodayIs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTodayIsCompleted(object state) {
            if ((this.TodayIsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TodayIsCompleted(this, new TodayIsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TodayIsAsync() {
            this.TodayIsAsync(null);
        }
        
        public void TodayIsAsync(object userState) {
            if ((this.onBeginTodayIsDelegate == null)) {
                this.onBeginTodayIsDelegate = new BeginOperationDelegate(this.OnBeginTodayIs);
            }
            if ((this.onEndTodayIsDelegate == null)) {
                this.onEndTodayIsDelegate = new EndOperationDelegate(this.OnEndTodayIs);
            }
            if ((this.onTodayIsCompletedDelegate == null)) {
                this.onTodayIsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTodayIsCompleted);
            }
            base.InvokeAsync(this.onBeginTodayIsDelegate, null, this.onEndTodayIsDelegate, this.onTodayIsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DayNamerClientApp.DayNamerServiceReference.IDayInfo.BeginTodayAdd(int daysToAdd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTodayAdd(daysToAdd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string DayNamerClientApp.DayNamerServiceReference.IDayInfo.EndTodayAdd(System.IAsyncResult result) {
            return base.Channel.EndTodayAdd(result);
        }
        
        private System.IAsyncResult OnBeginTodayAdd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int daysToAdd = ((int)(inValues[0]));
            return ((DayNamerClientApp.DayNamerServiceReference.IDayInfo)(this)).BeginTodayAdd(daysToAdd, callback, asyncState);
        }
        
        private object[] OnEndTodayAdd(System.IAsyncResult result) {
            string retVal = ((DayNamerClientApp.DayNamerServiceReference.IDayInfo)(this)).EndTodayAdd(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTodayAddCompleted(object state) {
            if ((this.TodayAddCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TodayAddCompleted(this, new TodayAddCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TodayAddAsync(int daysToAdd) {
            this.TodayAddAsync(daysToAdd, null);
        }
        
        public void TodayAddAsync(int daysToAdd, object userState) {
            if ((this.onBeginTodayAddDelegate == null)) {
                this.onBeginTodayAddDelegate = new BeginOperationDelegate(this.OnBeginTodayAdd);
            }
            if ((this.onEndTodayAddDelegate == null)) {
                this.onEndTodayAddDelegate = new EndOperationDelegate(this.OnEndTodayAdd);
            }
            if ((this.onTodayAddCompletedDelegate == null)) {
                this.onTodayAddCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTodayAddCompleted);
            }
            base.InvokeAsync(this.onBeginTodayAddDelegate, new object[] {
                        daysToAdd}, this.onEndTodayAddDelegate, this.onTodayAddCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override DayNamerClientApp.DayNamerServiceReference.IDayInfo CreateChannel() {
            return new DayInfoClientChannel(this);
        }
        
        private class DayInfoClientChannel : ChannelBase<DayNamerClientApp.DayNamerServiceReference.IDayInfo>, DayNamerClientApp.DayNamerServiceReference.IDayInfo {
            
            public DayInfoClientChannel(System.ServiceModel.ClientBase<DayNamerClientApp.DayNamerServiceReference.IDayInfo> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginTodayIs(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("TodayIs", _args, callback, asyncState);
                return _result;
            }
            
            public string EndTodayIs(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("TodayIs", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTodayAdd(int daysToAdd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = daysToAdd;
                System.IAsyncResult _result = base.BeginInvoke("TodayAdd", _args, callback, asyncState);
                return _result;
            }
            
            public string EndTodayAdd(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("TodayAdd", _args, result)));
                return _result;
            }
        }
    }
}
